; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\isp_user.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\isp_user.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC131\Include -I..\..\..\..\Library\StdDriver\inc -I..\..\ISP_UART -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\isp_user.crf ..\ISP_USER.c]
                          THUMB

                          AREA ||i.Checksum||, CODE, READONLY, ALIGN=1

                  Checksum PROC
;;;119    
;;;120    static uint16_t Checksum(unsigned char *buf, int len)
000000  4603              MOV      r3,r0
;;;121    {
000002  b510              PUSH     {r4,lr}
;;;122        int i;
;;;123        uint16_t c;
;;;124    
;;;125        for (c = 0, i = 0 ; i < len; i++) {
000004  2000              MOVS     r0,#0
000006  4602              MOV      r2,r0
000008  e003              B        |L1.18|
                  |L1.10|
;;;126            c += buf[i];
00000a  5c9c              LDRB     r4,[r3,r2]
00000c  1820              ADDS     r0,r4,r0
00000e  b280              UXTH     r0,r0
000010  1c52              ADDS     r2,r2,#1
                  |L1.18|
000012  428a              CMP      r2,r1                 ;125
000014  dbf9              BLT      |L1.10|
;;;127        }
;;;128    
;;;129        return (c);
;;;130    }
000016  bd10              POP      {r4,pc}
;;;131    
                          ENDP


                          AREA ||i.EraseAP||, CODE, READONLY, ALIGN=1

                  EraseAP PROC
;;;150    //bAprom == TRUE erase all aprom besides data flash
;;;151    void EraseAP(unsigned int addr_start, unsigned int addr_end)
000000  b570              PUSH     {r4-r6,lr}
;;;152    {
;;;153        unsigned int eraseLoop = addr_start;
000002  4604              MOV      r4,r0
;;;154        // static uint8_t flag = 1;
;;;155    
;;;156        for (; eraseLoop < (addr_start+addr_end); eraseLoop += FMC_FLASH_PAGE_SIZE) {
000004  1845              ADDS     r5,r0,r1
000006  e005              B        |L2.20|
                  |L2.8|
;;;157            #if 0   // debug
;;;158            if (flag)
;;;159            {
;;;160                printf("%s:0x%8X\r\n",__FUNCTION__,addr_start+addr_end);
;;;161                flag = 0;
;;;162            }
;;;163            if ((eraseLoop % 0x1000) ==0)
;;;164            {
;;;165                printf("%s:0x%8X\r\n",__FUNCTION__,eraseLoop);
;;;166            }
;;;167            #endif
;;;168            FMC_Erase_User(eraseLoop);
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       FMC_Erase_User
00000e  34ff              ADDS     r4,r4,#0xff
000010  34ff              ADDS     r4,r4,#0xff
000012  3402              ADDS     r4,#2
                  |L2.20|
000014  42a5              CMP      r5,r4                 ;156
000016  d8f7              BHI      |L2.8|
;;;169        }
;;;170    
;;;171        return;
;;;172    }
000018  bd70              POP      {r4-r6,pc}
;;;173    
                          ENDP


                          AREA ||i.FMC_SetVectorPageAddr||, CODE, READONLY, ALIGN=2

                  FMC_SetVectorPageAddr PROC
;;;427     */
;;;428    static __INLINE void FMC_SetVectorPageAddr(uint32_t u32PageAddr)
000000  4905              LDR      r1,|L3.24|
;;;429    {
;;;430        FMC->ISPCMD = FMC_ISPCMD_VECMAP; /* Set ISP Command Code */
000002  222e              MOVS     r2,#0x2e
000004  60ca              STR      r2,[r1,#0xc]
;;;431        FMC->ISPADR = u32PageAddr;       /* The address of specified page which will be map to address 0x0. It must be page alignment. */
000006  6048              STR      r0,[r1,#4]
;;;432        FMC->ISPTRG = 0x1;               /* Trigger to start ISP procedure */
000008  2001              MOVS     r0,#1
00000a  6108              STR      r0,[r1,#0x10]
;;;433        __ISB();                         /* To make sure ISP/CPU be Synchronized */
00000c  f3bf8f6f          ISB      
                  |L3.16|
;;;434        while(FMC->ISPTRG);              /* Waiting for ISP Done */
000010  6908              LDR      r0,[r1,#0x10]
000012  2800              CMP      r0,#0
000014  d1fc              BNE      |L3.16|
;;;435    }
000016  4770              BX       lr
;;;436    
                          ENDP

                  |L3.24|
                          DCD      0x5000c000

                          AREA ||i.IAPSystemReboot_RST||, CODE, READONLY, ALIGN=2

                  IAPSystemReboot_RST PROC
;;;61     
;;;62     void IAPSystemReboot_RST(unsigned char addr , unsigned char sel)
000000  b5f8              PUSH     {r3-r7,lr}
;;;63     {
;;;64         while(!UART_IS_TX_EMPTY(UART1));
000002  4a17              LDR      r2,|L4.96|
000004  460c              MOV      r4,r1                 ;63
000006  4605              MOV      r5,r0                 ;63
                  |L4.8|
000008  6993              LDR      r3,[r2,#0x18]
00000a  00d8              LSLS     r0,r3,#3
00000c  d5fc              BPL      |L4.8|
;;;65             
;;;66         /* Unlock protected registers */
;;;67         SYS_UnlockReg();
00000e  f7fffffe          BL       SYS_UnlockReg
;;;68         /* Enable FMC ISP function */
;;;69         FMC_Open();
000012  f7fffffe          BL       FMC_Open
;;;70     
;;;71         switch(addr) // CONFIG: w/ IAP
;;;72         {
;;;73             case RST_ADDR_LDROM:
;;;74                 /* Mask all interrupt before changing VECMAP to avoid wrong interrupt handler fetched */
;;;75                 __set_PRIMASK(1);    
;;;76                 FMC_SetVectorPageAddr(FMC_APROM_BASE);
;;;77                 FMC_SET_APROM_BOOT();        
000016  4e13              LDR      r6,|L4.100|
000018  2702              MOVS     r7,#2
00001a  2d00              CMP      r5,#0                 ;71
00001c  d002              BEQ      |L4.36|
00001e  2d01              CMP      r5,#1                 ;71
000020  d10f              BNE      |L4.66|
000022  e004              B        |L4.46|
                  |L4.36|
000024  2001              MOVS     r0,#1                 ;75
000026  f3808810          MSR      PRIMASK,r0            ;75
00002a  2000              MOVS     r0,#0                 ;76
;;;78                 break;
00002c  e004              B        |L4.56|
                  |L4.46|
;;;79             case RST_ADDR_APROM:
;;;80                 /* Mask all interrupt before changing VECMAP to avoid wrong interrupt handler fetched */
;;;81                 __set_PRIMASK(1);    
00002e  2001              MOVS     r0,#1
000030  f3808810          MSR      PRIMASK,r0
;;;82                 FMC_SetVectorPageAddr(APROM_APPLICATION_START);
000034  2003              MOVS     r0,#3
000036  0300              LSLS     r0,r0,#12
                  |L4.56|
000038  f7fffffe          BL       FMC_SetVectorPageAddr
00003c  6830              LDR      r0,[r6,#0]            ;77
00003e  43b8              BICS     r0,r0,r7              ;77
000040  6030              STR      r0,[r6,#0]            ;77
                  |L4.66|
;;;83                 FMC_SET_APROM_BOOT();        
;;;84                 break;            
;;;85         }
;;;86     
;;;87         switch(sel)
000042  2c00              CMP      r4,#0
000044  d006              BEQ      |L4.84|
000046  2c01              CMP      r4,#1
000048  d006              BEQ      |L4.88|
00004a  2c02              CMP      r4,#2
00004c  d101              BNE      |L4.82|
;;;88         {
;;;89             case RST_SEL_NVIC:  // Reset I/O and peripherals , only check BS(FMC_ISPCTL[1])
;;;90                 NVIC_SystemReset();
;;;91                 break;
;;;92             case RST_SEL_CPU:   // Not reset I/O and peripherals
;;;93                 SYS_ResetCPU();
;;;94                 break;   
;;;95             case RST_SEL_CHIP:
;;;96                 SYS_ResetChip();// Reset I/O and peripherals ,  BS(FMC_ISPCTL[1]) reload from CONFIG setting (CBS)
00004e  f7fffffe          BL       SYS_ResetChip
                  |L4.82|
;;;97                 break;                       
;;;98         } 
;;;99     }
000052  bdf8              POP      {r3-r7,pc}
                  |L4.84|
000054  f7fffffe          BL       NVIC_SystemReset
                  |L4.88|
000058  f7fffffe          BL       SYS_ResetCPU
00005c  bdf8              POP      {r3-r7,pc}
;;;100    
                          ENDP

00005e  0000              DCW      0x0000
                  |L4.96|
                          DCD      0x40150000
                  |L4.100|
                          DCD      0x5000c000

                          AREA ||i.NVIC_SystemReset||, CODE, READONLY, ALIGN=2

                  NVIC_SystemReset PROC
;;;606     */
;;;607    __STATIC_INLINE void NVIC_SystemReset(void)
000000  f3bf8f4f          DSB      
;;;608    {
;;;609      __DSB();                                                     /* Ensure all outstanding memory accesses included
;;;610                                                                      buffered write are completed before reset */
;;;611      SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
000004  4903              LDR      r1,|L5.20|
000006  4802              LDR      r0,|L5.16|
000008  60c8              STR      r0,[r1,#0xc]
;;;612                     SCB_AIRCR_SYSRESETREQ_Msk);
;;;613      __DSB();                                                     /* Ensure completion of memory access */
00000a  f3bf8f4f          DSB      
                  |L5.14|
;;;614      while(1);                                                    /* wait until reset */
00000e  e7fe              B        |L5.14|
;;;615    }
;;;616    
                          ENDP

                  |L5.16|
                          DCD      0x05fa0004
                  |L5.20|
                          DCD      0xe000ed00

                          AREA ||i.ParseCmd||, CODE, READONLY, ALIGN=2

                  ParseCmd PROC
;;;188    
;;;189    int ParseCmd(unsigned char *buffer, uint8_t len)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;190    {
000002  b083              SUB      sp,sp,#0xc
;;;191        static uint32_t StartAddress, StartAddress_bak, TotalLen, TotalLen_bak, LastDataLen, g_packno = 1;
;;;192        uint8_t *response;
;;;193        uint16_t lcksum;
;;;194        uint32_t lcmd, srclen, /*i,*/ regcnf0, security;
;;;195        unsigned char *pSrc;
;;;196        static uint32_t	gcmd;
;;;197        response = response_buff;
;;;198        pSrc = buffer;
;;;199        srclen = len;
;;;200        lcmd = inpw(pSrc);
000004  9f03              LDR      r7,[sp,#0xc]
000006  4d8b              LDR      r5,|L6.564|
000008  9e04              LDR      r6,[sp,#0x10]
00000a  683c              LDR      r4,[r7,#0]
;;;201        outpw(response + 4, 0);
00000c  2000              MOVS     r0,#0
00000e  6068              STR      r0,[r5,#4]
;;;202        pSrc += 8;
;;;203        srclen -= 8;
;;;204        ReadData(Config0, Config0 + 8, (uint32_t *)(response + 8)); //read config
000010  462a              MOV      r2,r5
000012  3208              ADDS     r2,r2,#8
000014  2003              MOVS     r0,#3
000016  4988              LDR      r1,|L6.568|
000018  0500              LSLS     r0,r0,#20
00001a  3e08              SUBS     r6,r6,#8
00001c  3708              ADDS     r7,r7,#8
00001e  9200              STR      r2,[sp,#0]
000020  f7fffffe          BL       ReadData
;;;205        regcnf0 = *(uint32_t *)(response + 8);
000024  68a8              LDR      r0,[r5,#8]
;;;206        security = regcnf0 & 0x2;
000026  2102              MOVS     r1,#2
000028  9001              STR      r0,[sp,#4]
00002a  4008              ANDS     r0,r0,r1
;;;207    
;;;208        if (lcmd == CMD_SYNC_PACKNO) {
00002c  9002              STR      r0,[sp,#8]
00002e  2ca4              CMP      r4,#0xa4
000030  d01a              BEQ      |L6.104|
;;;209            g_packno = inpw(pSrc);
;;;210        }
;;;211    
;;;212        if ((lcmd) && (lcmd != CMD_RESEND_PACKET)) {
000032  2c00              CMP      r4,#0
000034  d074              BEQ      |L6.288|
000036  2cff              CMP      r4,#0xff
000038  d079              BEQ      |L6.302|
                  |L6.58|
;;;213            gcmd = lcmd;
00003a  4880              LDR      r0,|L6.572|
;;;214        }
;;;215    
;;;216        if (lcmd == CMD_GET_FWVER) {
00003c  2ca6              CMP      r4,#0xa6
00003e  6184              STR      r4,[r0,#0x18]  ; gcmd
000040  d016              BEQ      |L6.112|
;;;217            response[8] = FW_VERSION;//version 2.3
;;;218        } else if (lcmd == CMD_GET_DEVICEID) {
000042  2cb1              CMP      r4,#0xb1
000044  d017              BEQ      |L6.118|
;;;219            outpw(response + 8, SYS->PDID);
;;;220            goto out;
;;;221        } else if (lcmd == CMD_RUN_APROM || lcmd == CMD_RUN_LDROM || lcmd == CMD_RESET) {
000046  2cab              CMP      r4,#0xab
000048  d01a              BEQ      |L6.128|
00004a  2cac              CMP      r4,#0xac
00004c  d018              BEQ      |L6.128|
00004e  2cad              CMP      r4,#0xad
000050  d016              BEQ      |L6.128|
;;;222        	
;;;223     		#if 1
;;;224            write_magic_tag(0xBB); 
;;;225            
;;;226            //
;;;227            // In order to verify the checksum in the application, 
;;;228            // do CHIP_RST to enter bootloader again.
;;;229            //
;;;230            // LDROM_DEBUG("Perform RESET...\r\n");
;;;231            // while(!UART_IS_TX_EMPTY(UART1));        
;;;232            // SYS_UnlockReg();
;;;233            // SYS_ResetChip();
;;;234            
;;;235            IAPSystemReboot_RST(RST_ADDR_LDROM,RST_SEL_CPU);        
;;;236    		#else   	
;;;237        	
;;;238            outpw(&SYS->RSTSRC, 3);//clear bit
;;;239    
;;;240            /* Set BS */
;;;241            if (lcmd == CMD_RUN_APROM) {
;;;242                i = (FMC->ISPCON & 0xFFFFFFFC);
;;;243            } else if (lcmd == CMD_RUN_LDROM) {
;;;244                i = (FMC->ISPCON & 0xFFFFFFFC);
;;;245                i |= 0x00000002;
;;;246            } else {
;;;247                i = (FMC->ISPCON & 0xFFFFFFFE);//ISP disable
;;;248            }
;;;249    
;;;250            outpw(&FMC->ISPCON, i);
;;;251            outpw(&SCB->AIRCR, (V6M_AIRCR_VECTKEY_DATA | V6M_AIRCR_SYSRESETREQ));
;;;252    		#endif
;;;253    
;;;254            /* Trap the CPU */
;;;255            while (1);
;;;256        } else if (lcmd == CMD_CONNECT) {
000052  2cae              CMP      r4,#0xae
000054  d01c              BEQ      |L6.144|
;;;257            g_packno = 1;
;;;258            goto out;
;;;259        } else if (lcmd == CMD_DISCONNECT) {
000056  2caf              CMP      r4,#0xaf
000058  d01e              BEQ      |L6.152|
;;;260            return 0;
;;;261        } else if ((lcmd == CMD_UPDATE_APROM) || (lcmd == CMD_ERASE_ALL)) {
00005a  2ca0              CMP      r4,#0xa0
00005c  d01f              BEQ      |L6.158|
00005e  2ca3              CMP      r4,#0xa3
000060  d01d              BEQ      |L6.158|
;;;262            // EraseAP(APROM_APPLICATION_START, (g_apromSize < g_dataFlashAddr) ? g_apromSize : g_dataFlashAddr);
;;;263            EraseAP(APROM_APPLICATION_START, g_apromSize);
;;;264    
;;;265            if (lcmd == CMD_ERASE_ALL) { //erase APROM + data flash
;;;266                EraseAP(g_dataFlashAddr, g_dataFlashAddr + g_dataFlashSize);
;;;267                *(uint32_t *)(response + 8) = regcnf0 | 0x02;
;;;268                UpdateConfig((uint32_t *)(response + 8), NULL);
;;;269            }
;;;270    
;;;271            bUpdateApromCmd = TRUE;
;;;272        } else if (lcmd == CMD_GET_FLASHMODE) {
000062  2cca              CMP      r4,#0xca
000064  d03d              BEQ      |L6.226|
000066  e033              B        |L6.208|
                  |L6.104|
000068  6839              LDR      r1,[r7,#0]            ;209
00006a  4874              LDR      r0,|L6.572|
00006c  6141              STR      r1,[r0,#0x14]         ;209  ; g_packno
00006e  e7e4              B        |L6.58|
                  |L6.112|
000070  2031              MOVS     r0,#0x31              ;217
000072  7228              STRB     r0,[r5,#8]            ;217
000074  e054              B        |L6.288|
                  |L6.118|
000076  2005              MOVS     r0,#5                 ;219
000078  0700              LSLS     r0,r0,#28             ;219
00007a  6800              LDR      r0,[r0,#0]            ;219
00007c  60a8              STR      r0,[r5,#8]            ;219
00007e  e0cc              B        |L6.538|
                  |L6.128|
000080  20bb              MOVS     r0,#0xbb              ;224
000082  f7fffffe          BL       write_magic_tag
000086  2101              MOVS     r1,#1                 ;235
000088  2000              MOVS     r0,#0                 ;235
00008a  f7fffffe          BL       IAPSystemReboot_RST
                  |L6.142|
00008e  e7fe              B        |L6.142|
                  |L6.144|
000090  496a              LDR      r1,|L6.572|
000092  2001              MOVS     r0,#1                 ;257
000094  6148              STR      r0,[r1,#0x14]         ;258  ; g_packno
000096  e0c0              B        |L6.538|
                  |L6.152|
000098  2000              MOVS     r0,#0                 ;260
;;;273            //return 1: APROM, 2: LDROM
;;;274            outpw(response + 8, (FMC->ISPCON & 0x2) ? 2 : 1);
;;;275        }
;;;276    
;;;277        if ((lcmd == CMD_UPDATE_APROM) || (lcmd == CMD_UPDATE_DATAFLASH)) {
;;;278            if (lcmd == CMD_UPDATE_DATAFLASH) {
;;;279                StartAddress = g_dataFlashAddr;
;;;280    
;;;281                if (g_dataFlashSize) { //g_dataFlashAddr
;;;282                    EraseAP(g_dataFlashAddr, g_dataFlashAddr + g_dataFlashSize);
;;;283                } else {
;;;284                    goto out;
;;;285                }
;;;286            } else {
;;;287                StartAddress = APROM_APPLICATION_START;
;;;288            }
;;;289    
;;;290            //StartAddress = inpw(pSrc);
;;;291            TotalLen = inpw(pSrc + 4);
;;;292            pSrc += 8;
;;;293            srclen -= 8;
;;;294            StartAddress_bak = StartAddress;
;;;295            TotalLen_bak = TotalLen;
;;;296        } else if (lcmd == CMD_UPDATE_CONFIG) {
;;;297            if ((security == 0) && (!bUpdateApromCmd)) { //security lock
;;;298                goto out;
;;;299            }
;;;300    
;;;301            UpdateConfig((uint32_t *)(pSrc), (uint32_t *)(response + 8));
;;;302            GetDataFlashInfo(&g_dataFlashAddr, &g_dataFlashSize);
;;;303            goto out;
;;;304        } else if (lcmd == CMD_RESEND_PACKET) { //for APROM&Data flash only
;;;305            StartAddress -= LastDataLen;
;;;306            TotalLen += LastDataLen;
;;;307    
;;;308            if ((StartAddress & 0xFFE00) >= Config0) {
;;;309                goto out;
;;;310            }
;;;311    
;;;312            ReadData(StartAddress & 0xFFE00, StartAddress, (uint32_t *)aprom_buf);
;;;313            FMC_Erase_User(StartAddress & 0xFFE00);
;;;314            WriteData(StartAddress & 0xFFE00, StartAddress, (uint32_t *)aprom_buf);
;;;315    
;;;316            if ((StartAddress % FMC_FLASH_PAGE_SIZE) >= (FMC_FLASH_PAGE_SIZE - LastDataLen)) {
;;;317                FMC_Erase_User((StartAddress & 0xFFE00) + FMC_FLASH_PAGE_SIZE);
;;;318            }
;;;319    
;;;320            goto out;
;;;321        }
;;;322    
;;;323        if ((gcmd == CMD_UPDATE_APROM) || (gcmd == CMD_UPDATE_DATAFLASH)) {
;;;324            if (TotalLen < srclen) {
;;;325                srclen = TotalLen;//prevent last package from over writing
;;;326            }
;;;327    
;;;328            TotalLen -= srclen;
;;;329            WriteData(StartAddress, StartAddress + srclen, (uint32_t *)pSrc); 
;;;330            memset(pSrc, 0, srclen);
;;;331            ReadData(StartAddress, StartAddress + srclen, (uint32_t *)pSrc);
;;;332            StartAddress += srclen;
;;;333            LastDataLen =  srclen;
;;;334    
;;;335            if (TotalLen == 0) {
;;;336                lcksum = CalCheckSum(StartAddress_bak, TotalLen_bak);
;;;337                outps(response + 8, lcksum);
;;;338            }
;;;339        }
;;;340    
;;;341    out:
;;;342        lcksum = Checksum(buffer, len);
;;;343        outps(response, lcksum);
;;;344        ++g_packno;
;;;345        outpw(response + 4, g_packno);
;;;346        g_packno++;
;;;347        return 0;
;;;348    }
00009a  b005              ADD      sp,sp,#0x14
00009c  bdf0              POP      {r4-r7,pc}
                  |L6.158|
00009e  4867              LDR      r0,|L6.572|
0000a0  6a01              LDR      r1,[r0,#0x20]         ;263  ; g_apromSize
0000a2  2003              MOVS     r0,#3                 ;263
0000a4  0300              LSLS     r0,r0,#12             ;263
0000a6  f7fffffe          BL       EraseAP
0000aa  2ca3              CMP      r4,#0xa3              ;265
0000ac  d10d              BNE      |L6.202|
0000ae  4963              LDR      r1,|L6.572|
0000b0  6a48              LDR      r0,[r1,#0x24]         ;266  ; g_dataFlashAddr
0000b2  6a89              LDR      r1,[r1,#0x28]         ;266  ; g_dataFlashSize
0000b4  1841              ADDS     r1,r0,r1              ;266
0000b6  f7fffffe          BL       EraseAP
0000ba  9801              LDR      r0,[sp,#4]            ;267
0000bc  2102              MOVS     r1,#2                 ;267
0000be  4308              ORRS     r0,r0,r1              ;267
0000c0  60a8              STR      r0,[r5,#8]            ;268
0000c2  2100              MOVS     r1,#0                 ;268
0000c4  9800              LDR      r0,[sp,#0]            ;268
0000c6  f7fffffe          BL       UpdateConfig
                  |L6.202|
0000ca  495c              LDR      r1,|L6.572|
0000cc  2001              MOVS     r0,#1                 ;271
0000ce  61c8              STR      r0,[r1,#0x1c]         ;271  ; bUpdateApromCmd
                  |L6.208|
0000d0  2ca0              CMP      r4,#0xa0              ;277
0000d2  d019              BEQ      |L6.264|
0000d4  2cc3              CMP      r4,#0xc3              ;277
0000d6  d00d              BEQ      |L6.244|
0000d8  2ca1              CMP      r4,#0xa1              ;296
0000da  d029              BEQ      |L6.304|
0000dc  2cff              CMP      r4,#0xff              ;304
0000de  d036              BEQ      |L6.334|
0000e0  e01e              B        |L6.288|
                  |L6.226|
0000e2  4857              LDR      r0,|L6.576|
0000e4  6800              LDR      r0,[r0,#0]            ;274
0000e6  0780              LSLS     r0,r0,#30             ;274
0000e8  d501              BPL      |L6.238|
0000ea  2002              MOVS     r0,#2                 ;274
0000ec  e000              B        |L6.240|
                  |L6.238|
0000ee  2001              MOVS     r0,#1                 ;274
                  |L6.240|
0000f0  60a8              STR      r0,[r5,#8]            ;274
0000f2  e015              B        |L6.288|
                  |L6.244|
0000f4  4951              LDR      r1,|L6.572|
0000f6  6a48              LDR      r0,[r1,#0x24]         ;279  ; g_dataFlashAddr
0000f8  6008              STR      r0,[r1,#0]            ;281  ; StartAddress
0000fa  6a89              LDR      r1,[r1,#0x28]         ;281  ; g_dataFlashSize
0000fc  2900              CMP      r1,#0                 ;281
0000fe  d015              BEQ      |L6.300|
000100  1841              ADDS     r1,r0,r1              ;282
000102  f7fffffe          BL       EraseAP
000106  e003              B        |L6.272|
                  |L6.264|
000108  2003              MOVS     r0,#3                 ;287
00010a  494c              LDR      r1,|L6.572|
00010c  0300              LSLS     r0,r0,#12             ;287
00010e  6008              STR      r0,[r1,#0]            ;287  ; StartAddress
                  |L6.272|
000110  6878              LDR      r0,[r7,#4]            ;291
000112  494a              LDR      r1,|L6.572|
000114  3e08              SUBS     r6,r6,#8              ;295
000116  6088              STR      r0,[r1,#8]            ;294  ; TotalLen
000118  680a              LDR      r2,[r1,#0]            ;294  ; StartAddress
00011a  604a              STR      r2,[r1,#4]            ;295  ; StartAddress_bak
00011c  3708              ADDS     r7,r7,#8              ;295
00011e  60c8              STR      r0,[r1,#0xc]          ;295  ; TotalLen_bak
                  |L6.288|
000120  4c46              LDR      r4,|L6.572|
000122  69a0              LDR      r0,[r4,#0x18]         ;323  ; gcmd
000124  28a0              CMP      r0,#0xa0              ;323
000126  d03c              BEQ      |L6.418|
000128  28c3              CMP      r0,#0xc3              ;323
00012a  d03a              BEQ      |L6.418|
                  |L6.300|
00012c  e075              B        |L6.538|
                  |L6.302|
00012e  e00e              B        |L6.334|
                  |L6.304|
000130  4842              LDR      r0,|L6.572|
000132  9902              LDR      r1,[sp,#8]            ;297
000134  69c0              LDR      r0,[r0,#0x1c]         ;297  ; bUpdateApromCmd
000136  4301              ORRS     r1,r1,r0              ;297
000138  d06f              BEQ      |L6.538|
00013a  4638              MOV      r0,r7                 ;301
00013c  9900              LDR      r1,[sp,#0]            ;301
00013e  f7fffffe          BL       UpdateConfig
000142  493e              LDR      r1,|L6.572|
000144  3128              ADDS     r1,r1,#0x28           ;302
000146  1f08              SUBS     r0,r1,#4              ;302
000148  f7fffffe          BL       GetDataFlashInfo
00014c  e065              B        |L6.538|
                  |L6.334|
00014e  4c3b              LDR      r4,|L6.572|
000150  4e3c              LDR      r6,|L6.580|
000152  6821              LDR      r1,[r4,#0]            ;305  ; StartAddress
000154  6920              LDR      r0,[r4,#0x10]         ;305  ; LastDataLen
000156  1a09              SUBS     r1,r1,r0              ;305
000158  6021              STR      r1,[r4,#0]            ;306  ; StartAddress
00015a  68a2              LDR      r2,[r4,#8]            ;306  ; TotalLen
00015c  1810              ADDS     r0,r2,r0              ;306
00015e  60a0              STR      r0,[r4,#8]            ;312  ; TotalLen
000160  4a34              LDR      r2,|L6.564|
000162  4608              MOV      r0,r1                 ;312
000164  4030              ANDS     r0,r0,r6              ;312
000166  3240              ADDS     r2,r2,#0x40           ;312
000168  f7fffffe          BL       ReadData
00016c  6820              LDR      r0,[r4,#0]            ;313  ; StartAddress
00016e  4030              ANDS     r0,r0,r6              ;313
000170  f7fffffe          BL       FMC_Erase_User
000174  6820              LDR      r0,[r4,#0]            ;314  ; StartAddress
000176  4a2f              LDR      r2,|L6.564|
000178  4601              MOV      r1,r0                 ;314
00017a  4030              ANDS     r0,r0,r6              ;314
00017c  3240              ADDS     r2,r2,#0x40           ;314
00017e  f7fffffe          BL       WriteData
000182  6820              LDR      r0,[r4,#0]            ;316  ; StartAddress
000184  2101              MOVS     r1,#1                 ;316
000186  6923              LDR      r3,[r4,#0x10]         ;316  ; LastDataLen
000188  05c2              LSLS     r2,r0,#23             ;316
00018a  0249              LSLS     r1,r1,#9              ;316
00018c  0dd2              LSRS     r2,r2,#23             ;316
00018e  1ac9              SUBS     r1,r1,r3              ;316
000190  428a              CMP      r2,r1                 ;316
000192  d342              BCC      |L6.538|
000194  4030              ANDS     r0,r0,r6              ;317
000196  30ff              ADDS     r0,r0,#0xff           ;317
000198  30ff              ADDS     r0,r0,#0xff           ;317
00019a  3002              ADDS     r0,#2                 ;317
00019c  f7fffffe          BL       FMC_Erase_User
0001a0  e03b              B        |L6.538|
                  |L6.418|
0001a2  68a0              LDR      r0,[r4,#8]            ;324  ; TotalLen
0001a4  42b0              CMP      r0,r6                 ;324
0001a6  d200              BCS      |L6.426|
0001a8  4606              MOV      r6,r0                 ;325
                  |L6.426|
0001aa  1b80              SUBS     r0,r0,r6              ;328
0001ac  60a0              STR      r0,[r4,#8]            ;329  ; TotalLen
0001ae  6820              LDR      r0,[r4,#0]            ;329  ; StartAddress
0001b0  463a              MOV      r2,r7                 ;329
0001b2  1981              ADDS     r1,r0,r6              ;329
0001b4  f7fffffe          BL       WriteData
0001b8  4631              MOV      r1,r6                 ;330
0001ba  4638              MOV      r0,r7                 ;330
0001bc  f7fffffe          BL       __aeabi_memclr
0001c0  6820              LDR      r0,[r4,#0]            ;331  ; StartAddress
0001c2  463a              MOV      r2,r7                 ;331
0001c4  1981              ADDS     r1,r0,r6              ;331
0001c6  f7fffffe          BL       ReadData
0001ca  6820              LDR      r0,[r4,#0]            ;332  ; StartAddress
0001cc  6126              STR      r6,[r4,#0x10]         ;335  ; LastDataLen
0001ce  1980              ADDS     r0,r0,r6              ;332
0001d0  6020              STR      r0,[r4,#0]            ;335  ; StartAddress
0001d2  68a0              LDR      r0,[r4,#8]            ;335  ; TotalLen
0001d4  2800              CMP      r0,#0                 ;335
0001d6  d120              BNE      |L6.538|
0001d8  6860              LDR      r0,[r4,#4]            ;336  ; StartAddress_bak
0001da  9000              STR      r0,[sp,#0]            ;336
0001dc  2600              MOVS     r6,#0                 ;336
0001de  68e7              LDR      r7,[r4,#0xc]          ;336  ; TotalLen_bak
0001e0  4634              MOV      r4,r6                 ;336
0001e2  e017              B        |L6.532|
                  |L6.484|
0001e4  9800              LDR      r0,[sp,#0]            ;336
0001e6  4a13              LDR      r2,|L6.564|
0001e8  1900              ADDS     r0,r0,r4              ;336
0001ea  1dc1              ADDS     r1,r0,#7              ;336
0001ec  31ff              ADDS     r1,r1,#0xff           ;336
0001ee  31fa              ADDS     r1,r1,#0xfa           ;336
0001f0  3240              ADDS     r2,r2,#0x40           ;336
0001f2  f7fffffe          BL       ReadData
0001f6  2101              MOVS     r1,#1                 ;336
0001f8  1b38              SUBS     r0,r7,r4              ;336
0001fa  0249              LSLS     r1,r1,#9              ;336
0001fc  4288              CMP      r0,r1                 ;336
0001fe  d200              BCS      |L6.514|
000200  4601              MOV      r1,r0                 ;336
                  |L6.514|
000202  480c              LDR      r0,|L6.564|
000204  3040              ADDS     r0,r0,#0x40           ;336
000206  f7fffffe          BL       Checksum
00020a  1980              ADDS     r0,r0,r6              ;336
00020c  34ff              ADDS     r4,r4,#0xff           ;336
00020e  34ff              ADDS     r4,r4,#0xff           ;336
000210  b286              UXTH     r6,r0                 ;336
000212  3402              ADDS     r4,#2                 ;336
                  |L6.532|
000214  42bc              CMP      r4,r7                 ;336
000216  d3e5              BCC      |L6.484|
000218  812e              STRH     r6,[r5,#8]            ;337
                  |L6.538|
00021a  9904              LDR      r1,[sp,#0x10]         ;342
00021c  9803              LDR      r0,[sp,#0xc]          ;342
00021e  f7fffffe          BL       Checksum
000222  8028              STRH     r0,[r5,#0]            ;343
000224  4905              LDR      r1,|L6.572|
000226  6948              LDR      r0,[r1,#0x14]         ;344  ; g_packno
000228  1c40              ADDS     r0,r0,#1              ;344
00022a  6068              STR      r0,[r5,#4]            ;345
00022c  1c40              ADDS     r0,r0,#1              ;345
00022e  6148              STR      r0,[r1,#0x14]         ;347  ; g_packno
000230  e732              B        |L6.152|
;;;349    
                          ENDP

000232  0000              DCW      0x0000
                  |L6.564|
                          DCD      ||.bss||
                  |L6.568|
                          DCD      0x00300008
                  |L6.572|
                          DCD      ||.data||
                  |L6.576|
                          DCD      0x5000c000
                  |L6.580|
                          DCD      0x000ffe00

                          AREA ||i.SYS_UnlockReg||, CODE, READONLY, ALIGN=2

                  SYS_UnlockReg PROC
;;;1844     */
;;;1845   static __INLINE void SYS_UnlockReg(void)
000000  b510              PUSH     {r4,lr}
;;;1846   {
;;;1847       while(SYS->REGWRPROT != SYS_REGWRPROT_REGPROTDIS_Msk)
;;;1848       {
;;;1849           SYS->REGWRPROT = 0x59;
000002  2159              MOVS     r1,#0x59
;;;1850           SYS->REGWRPROT = 0x16;
000004  2316              MOVS     r3,#0x16
000006  4805              LDR      r0,|L7.28|
;;;1851           SYS->REGWRPROT = 0x88;
000008  2288              MOVS     r2,#0x88
00000a  e002              B        |L7.18|
                  |L7.12|
00000c  6001              STR      r1,[r0,#0]            ;1849
00000e  6003              STR      r3,[r0,#0]            ;1850
000010  6002              STR      r2,[r0,#0]
                  |L7.18|
000012  6804              LDR      r4,[r0,#0]            ;1847
000014  2c01              CMP      r4,#1                 ;1847
000016  d1f9              BNE      |L7.12|
;;;1852       }
;;;1853   }
000018  bd10              POP      {r4,pc}
;;;1854   
                          ENDP

00001a  0000              DCW      0x0000
                  |L7.28|
                          DCD      0x50000100

                          AREA ||i.SystemReboot_RST||, CODE, READONLY, ALIGN=2

                  SystemReboot_RST PROC
;;;21     
;;;22     void SystemReboot_RST(unsigned char addr , unsigned char sel)
000000  b5f8              PUSH     {r3-r7,lr}
;;;23     {
;;;24         while(!UART_IS_TX_EMPTY(UART1));
000002  4a18              LDR      r2,|L8.100|
000004  460c              MOV      r4,r1                 ;23
000006  4605              MOV      r5,r0                 ;23
                  |L8.8|
000008  6993              LDR      r3,[r2,#0x18]
00000a  00d8              LSLS     r0,r3,#3
00000c  d5fc              BPL      |L8.8|
;;;25             
;;;26         /* Unlock protected registers */
;;;27         SYS_UnlockReg();
00000e  f7fffffe          BL       SYS_UnlockReg
;;;28         /* Enable FMC ISP function */
;;;29         FMC_Open();
000012  f7fffffe          BL       FMC_Open
;;;30     
;;;31         switch(addr) // CONFIG: w/ IAP
;;;32         {
;;;33             case RST_ADDR_LDROM:
;;;34                 /* Mask all interrupt before changing VECMAP to avoid wrong interrupt handler fetched */
;;;35                 __set_PRIMASK(1);    
;;;36                 FMC_SetVectorPageAddr(FMC_LDROM_BASE);
;;;37                 FMC_SET_LDROM_BOOT();        
000016  4e14              LDR      r6,|L8.104|
000018  2702              MOVS     r7,#2
00001a  2d00              CMP      r5,#0                 ;31
00001c  d002              BEQ      |L8.36|
00001e  2d01              CMP      r5,#1                 ;31
000020  d112              BNE      |L8.72|
000022  e008              B        |L8.54|
                  |L8.36|
000024  2001              MOVS     r0,#1                 ;35
000026  f3808810          MSR      PRIMASK,r0            ;35
00002a  0500              LSLS     r0,r0,#20             ;36
00002c  f7fffffe          BL       FMC_SetVectorPageAddr
000030  6830              LDR      r0,[r6,#0]
000032  4338              ORRS     r0,r0,r7
;;;38                 break;
000034  e007              B        |L8.70|
                  |L8.54|
;;;39             case RST_ADDR_APROM:
;;;40                 /* Mask all interrupt before changing VECMAP to avoid wrong interrupt handler fetched */
;;;41                 __set_PRIMASK(1);    
000036  2001              MOVS     r0,#1
000038  f3808810          MSR      PRIMASK,r0
;;;42                 FMC_SetVectorPageAddr(FMC_APROM_BASE);
00003c  2000              MOVS     r0,#0
00003e  f7fffffe          BL       FMC_SetVectorPageAddr
;;;43                 FMC_SET_APROM_BOOT();        
000042  6830              LDR      r0,[r6,#0]
000044  43b8              BICS     r0,r0,r7
                  |L8.70|
000046  6030              STR      r0,[r6,#0]            ;37
                  |L8.72|
;;;44                 break;            
;;;45         }
;;;46     
;;;47         switch(sel)
000048  2c00              CMP      r4,#0
00004a  d006              BEQ      |L8.90|
00004c  2c01              CMP      r4,#1
00004e  d006              BEQ      |L8.94|
000050  2c02              CMP      r4,#2
000052  d101              BNE      |L8.88|
;;;48         {
;;;49             case RST_SEL_NVIC:  // Reset I/O and peripherals , only check BS(FMC_ISPCTL[1])
;;;50                 NVIC_SystemReset();
;;;51                 break;
;;;52             case RST_SEL_CPU:   // Not reset I/O and peripherals
;;;53                 SYS_ResetCPU();
;;;54                 break;   
;;;55             case RST_SEL_CHIP:
;;;56                 SYS_ResetChip();// Reset I/O and peripherals ,  BS(FMC_ISPCTL[1]) reload from CONFIG setting (CBS)
000054  f7fffffe          BL       SYS_ResetChip
                  |L8.88|
;;;57                 break;                       
;;;58         } 
;;;59     }
000058  bdf8              POP      {r3-r7,pc}
                  |L8.90|
00005a  f7fffffe          BL       NVIC_SystemReset
                  |L8.94|
00005e  f7fffffe          BL       SYS_ResetCPU
000062  bdf8              POP      {r3-r7,pc}
;;;60     
                          ENDP

                  |L8.100|
                          DCD      0x40150000
                  |L8.104|
                          DCD      0x5000c000

                          AREA ||i.UpdateConfig||, CODE, READONLY, ALIGN=2

                  UpdateConfig PROC
;;;173    
;;;174    void UpdateConfig(unsigned int *data, unsigned int *res)
000000  b5f8              PUSH     {r3-r7,lr}
;;;175    {
;;;176        FMC_ENABLE_CFG_UPDATE();
000002  4e10              LDR      r6,|L9.68|
000004  4605              MOV      r5,r0                 ;175
000006  6830              LDR      r0,[r6,#0]
000008  460c              MOV      r4,r1                 ;175
00000a  2710              MOVS     r7,#0x10
00000c  4338              ORRS     r0,r0,r7
00000e  6030              STR      r0,[r6,#0]
;;;177        FMC_Erase_User(Config0);
000010  01b0              LSLS     r0,r6,#6
000012  f7fffffe          BL       FMC_Erase_User
;;;178        FMC_Write_User(Config0, *data);
000016  01b0              LSLS     r0,r6,#6
000018  6829              LDR      r1,[r5,#0]
00001a  f7fffffe          BL       FMC_Write_User
;;;179        FMC_Write_User(Config1, *(data + 1));
00001e  6869              LDR      r1,[r5,#4]
000020  4d09              LDR      r5,|L9.72|
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       FMC_Write_User
;;;180    
;;;181        if (res) {
000028  2c00              CMP      r4,#0
00002a  d007              BEQ      |L9.60|
;;;182            FMC_Read_User(Config0, res);
00002c  4621              MOV      r1,r4
00002e  1f28              SUBS     r0,r5,#4
000030  f7fffffe          BL       FMC_Read_User
;;;183            FMC_Read_User(Config1, res + 1);
000034  1d21              ADDS     r1,r4,#4
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       FMC_Read_User
                  |L9.60|
;;;184        }
;;;185    
;;;186        FMC_DISABLE_CFG_UPDATE();
00003c  6830              LDR      r0,[r6,#0]
00003e  43b8              BICS     r0,r0,r7
000040  6030              STR      r0,[r6,#0]
;;;187    }
000042  bdf8              POP      {r3-r7,pc}
;;;188    
                          ENDP

                  |L9.68|
                          DCD      0x5000c000
                  |L9.72|
                          DCD      0x00300004

                          AREA ||i.read_magic_tag||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  read_magic_tag PROC
;;;101    
;;;102    uint8_t read_magic_tag(void)
000000  b510              PUSH     {r4,lr}
;;;103    {
;;;104        uint8_t tag = 0;
;;;105    
;;;106        tag = (uint8_t) flag_check_ISP_process;
000002  4804              LDR      r0,|L10.20|
000004  7804              LDRB     r4,[r0,#0]  ; flag_check_ISP_process
;;;107    
;;;108        LDROM_DEBUG("Read MagicTag <0x%02X>\r\n", tag);
000006  a004              ADR      r0,|L10.24|
000008  4621              MOV      r1,r4
00000a  f7fffffe          BL       __2printf
;;;109        
;;;110        return tag;
00000e  4620              MOV      r0,r4
;;;111    }
000010  bd10              POP      {r4,pc}
;;;112    
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      ||.ARM.__AT_0x20001FFC||
                  |L10.24|
000018  1b5b313b          DCB      27,"[1;36m[LDROM]Read MagicTag <0x%02X>\r\n",27,"[0m",0
00001c  33366d5b
000020  4c44524f
000024  4d5d5265
000028  6164204d
00002c  61676963
000030  54616720
000034  3c307825
000038  3032583e
00003c  0d0a1b5b
000040  306d00  
000043  00                DCB      0

                          AREA ||i.write_magic_tag||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  write_magic_tag PROC
;;;112    
;;;113    void write_magic_tag(uint8_t tag)
000000  b510              PUSH     {r4,lr}
;;;114    {
;;;115        flag_check_ISP_process = tag;    
000002  4903              LDR      r1,|L11.16|
;;;116    
;;;117        LDROM_DEBUG("Write MagicTag <0x%02X>\r\n", tag);
000004  6008              STR      r0,[r1,#0]  ; flag_check_ISP_process
000006  4601              MOV      r1,r0
000008  a002              ADR      r0,|L11.20|
00000a  f7fffffe          BL       __2printf
;;;118    }
00000e  bd10              POP      {r4,pc}
;;;119    
                          ENDP

                  |L11.16|
                          DCD      ||.ARM.__AT_0x20001FFC||
                  |L11.20|
000014  1b5b313b          DCB      27,"[1;36m[LDROM]Write MagicTag <0x%02X>\r\n",27,"[0m",0
000018  33366d5b
00001c  4c44524f
000020  4d5d5772
000024  69746520
000028  4d616769
00002c  63546167
000030  203c3078
000034  25303258
000038  3e0d0a1b
00003c  5b306d00

                          AREA ||.ARM.__AT_0x20001FFC||, DATA, NOINIT, ALIGN=2

                  flag_check_ISP_process
                          %        4

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  response_buff
                          %        64
                  aprom_buf
                          %        512

                          AREA ||.data||, DATA, ALIGN=2

                  StartAddress
                          DCD      0x00000000
                  StartAddress_bak
                          DCD      0x00000000
                  TotalLen
                          DCD      0x00000000
                  TotalLen_bak
                          DCD      0x00000000
                  LastDataLen
                          DCD      0x00000000
                  g_packno
                          DCD      0x00000001
                  gcmd
                          DCD      0x00000000
                  bUpdateApromCmd
                          DCD      0x00000000
                  g_apromSize
                          DCD      0x00000000
                  g_dataFlashAddr
                          DCD      0x00000000
                  g_dataFlashSize
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\ISP_USER.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_ISP_USER_c_0ae5362f____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_ISP_USER_c_0ae5362f____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_ISP_USER_c_0ae5362f____REVSH|
#line 132
|__asm___10_ISP_USER_c_0ae5362f____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
