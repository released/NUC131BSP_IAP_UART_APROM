; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\uart_transfer.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\uart_transfer.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC131\Include -I..\..\..\..\Library\StdDriver\inc -I..\..\ISP_UART -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\uart_transfer.crf ..\uart_transfer.c]
                          THUMB

                          AREA ||i.PutString||, CODE, READONLY, ALIGN=2

                  PutString PROC
;;;53     extern __align(4) uint8_t response_buff[64];
;;;54     void PutString(void)
000000  4905              LDR      r1,|L1.24|
;;;55     {
;;;56         uint32_t i;
;;;57     
;;;58         /* UART send response to master */    
;;;59         for (i = 0; i < MAX_PKT_SIZE; i++) {
;;;60             
;;;61             /* Wait for TX not full */
;;;62             while ((UART_ISP->FSR & UART_FSR_TX_FULL_Msk));
;;;63     
;;;64             /* UART send data */ 
;;;65             UART_ISP->THR = response_buff[i];
000002  4a06              LDR      r2,|L1.28|
000004  2000              MOVS     r0,#0                 ;59
                  |L1.6|
000006  698b              LDR      r3,[r1,#0x18]         ;62
000008  021b              LSLS     r3,r3,#8              ;62
00000a  d4fc              BMI      |L1.6|
00000c  5c13              LDRB     r3,[r2,r0]
00000e  600b              STR      r3,[r1,#0]
000010  1c40              ADDS     r0,r0,#1
000012  2840              CMP      r0,#0x40              ;59
000014  d3f7              BCC      |L1.6|
;;;66         }
;;;67     }
000016  4770              BX       lr
;;;68     
                          ENDP

                  |L1.24|
                          DCD      0x40050000
                  |L1.28|
                          DCD      response_buff

                          AREA ||i.UART02_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART02_IRQHandler PROC
;;;30     /*---------------------------------------------------------------------------------------------------------*/
;;;31     void UART_ISP_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;32     {
;;;33         /* Determine interrupt source */
;;;34         uint32_t u32IntSrc = UART_ISP->ISR;
000002  4d0f              LDR      r5,|L2.64|
000004  69ec              LDR      r4,[r5,#0x1c]
;;;35     
;;;36         /* RDA FIFO interrupt and RDA timeout interrupt */
;;;37         if (u32IntSrc & (UART_ISR_RDA_IF_Msk|UART_ISR_TOUT_IF_Msk)) { 
000006  2011              MOVS     r0,#0x11
;;;38             /* Read data until RX FIFO is empty or data is over maximum packet size */
;;;39             while (((UART_ISP->FSR & UART_FSR_RX_EMPTY_Msk) == 0) && (bufhead < MAX_PKT_SIZE)) {
;;;40                 uart_rcvbuf[bufhead++] = UART_ISP->RBR;
000008  4b0e              LDR      r3,|L2.68|
00000a  4204              TST      r4,r0                 ;37
00000c  d00d              BEQ      |L2.42|
00000e  4e0e              LDR      r6,|L2.72|
                  |L2.16|
000010  69a8              LDR      r0,[r5,#0x18]         ;39
000012  0440              LSLS     r0,r0,#17             ;39
000014  d409              BMI      |L2.42|
000016  7858              LDRB     r0,[r3,#1]            ;39  ; bufhead
000018  2840              CMP      r0,#0x40              ;39
00001a  d206              BCS      |L2.42|
00001c  6829              LDR      r1,[r5,#0]
00001e  7858              LDRB     r0,[r3,#1]  ; bufhead
000020  1832              ADDS     r2,r6,r0
000022  1c40              ADDS     r0,r0,#1
000024  7058              STRB     r0,[r3,#1]
000026  7011              STRB     r1,[r2,#0]
000028  e7f2              B        |L2.16|
                  |L2.42|
;;;41             }
;;;42         }
;;;43     
;;;44         /* Reset data buffer index */    
;;;45         if (bufhead == MAX_PKT_SIZE) {
00002a  7859              LDRB     r1,[r3,#1]  ; bufhead
00002c  2000              MOVS     r0,#0
00002e  2940              CMP      r1,#0x40
000030  d003              BEQ      |L2.58|
;;;46             bUartDataReady = TRUE;
;;;47             bufhead = 0;
;;;48         } else if (u32IntSrc & UART_ISR_TOUT_IF_Msk) {
000032  06e1              LSLS     r1,r4,#27
000034  d500              BPL      |L2.56|
                  |L2.54|
;;;49             bufhead = 0;
000036  7058              STRB     r0,[r3,#1]
                  |L2.56|
;;;50         }
;;;51     }
000038  bd70              POP      {r4-r6,pc}
                  |L2.58|
00003a  2101              MOVS     r1,#1                 ;46
00003c  7019              STRB     r1,[r3,#0]            ;46
00003e  e7fa              B        |L2.54|
;;;52     
                          ENDP

                  |L2.64|
                          DCD      0x40050000
                  |L2.68|
                          DCD      ||.data||
                  |L2.72|
                          DCD      ||.bss||

                          AREA ||i.UART_Init||, CODE, READONLY, ALIGN=2

                  UART_Init PROC
;;;69     
;;;70     void UART_Init()
000000  480d              LDR      r0,|L3.56|
;;;71     {
;;;72         /*---------------------------------------------------------------------------------------------------------*/
;;;73         /* Init UART                                                                                               */
;;;74         /*---------------------------------------------------------------------------------------------------------*/
;;;75         /* Select UART function */
;;;76         UART_ISP->FUN_SEL = UART_FUNC_SEL_UART;
000002  2100              MOVS     r1,#0
000004  6301              STR      r1,[r0,#0x30]
;;;77         /* Set UART line configuration */
;;;78         UART_ISP->LCR = UART_WORD_LEN_8 | UART_PARITY_NONE | UART_STOP_BIT_1;
000006  2103              MOVS     r1,#3
000008  60c1              STR      r1,[r0,#0xc]
;;;79         /* Set UART Rx and RTS trigger level */
;;;80         UART_ISP->FCR = UART_FCR_RFITL_14BYTES | UART_FCR_RTS_TRI_LEV_14BYTES;
00000a  490c              LDR      r1,|L3.60|
00000c  6081              STR      r1,[r0,#8]
;;;81         /* Set UART baud rate */
;;;82         UART_ISP->BAUD = (UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER(__HIRC, 115200));
00000e  210a              MOVS     r1,#0xa
000010  6241              STR      r1,[r0,#0x24]
;;;83         /* Set time-out interrupt comparator */
;;;84         UART_ISP->TOR = (UART_ISP->TOR & ~UART_TOR_TOIC_Msk) | (0x40);
000012  6a01              LDR      r1,[r0,#0x20]
000014  0a09              LSRS     r1,r1,#8
000016  0209              LSLS     r1,r1,#8
000018  3140              ADDS     r1,r1,#0x40
00001a  6201              STR      r1,[r0,#0x20]
00001c  4908              LDR      r1,|L3.64|
00001e  680a              LDR      r2,[r1,#0]
000020  2380              MOVS     r3,#0x80
000022  0a12              LSRS     r2,r2,#8
000024  0212              LSLS     r2,r2,#8
000026  431a              ORRS     r2,r2,r3
000028  600a              STR      r2,[r1,#0]
00002a  4a06              LDR      r2,|L3.68|
00002c  0159              LSLS     r1,r3,#5
00002e  6011              STR      r1,[r2,#0]
;;;85         NVIC_SetPriority(UART_ISP_IRQn, 2);
;;;86         NVIC_EnableIRQ(UART_ISP_IRQn);
;;;87         /* Enable tim-out counter, Rx tim-out interrupt and Rx ready interrupt */
;;;88         UART_ISP->IER = (UART_IER_TIME_OUT_EN_Msk | UART_IER_TOUT_IEN_Msk | UART_IER_RDA_IEN_Msk);
000030  4905              LDR      r1,|L3.72|
000032  6041              STR      r1,[r0,#4]
;;;89     }
000034  4770              BX       lr
;;;90     
                          ENDP

000036  0000              DCW      0x0000
                  |L3.56|
                          DCD      0x40050000
                  |L3.60|
                          DCD      0x00030030
                  |L3.64|
                          DCD      0xe000e40c
                  |L3.68|
                          DCD      0xe000e100
                  |L3.72|
                          DCD      0x00000811

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  uart_rcvbuf
                          %        64

                          AREA ||.data||, DATA, ALIGN=0

                  bUartDataReady
000000  00                DCB      0x00
                  bufhead
000001  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\uart_transfer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_uart_transfer_c_92e3c5f3____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_uart_transfer_c_92e3c5f3____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_uart_transfer_c_92e3c5f3____REVSH|
#line 132
|__asm___15_uart_transfer_c_92e3c5f3____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
