; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC131\Include -I..\..\..\..\Library\StdDriver\inc -I..\..\ISP_UART -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.DEBUG_UART_Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  DEBUG_UART_Init PROC
;;;585    
;;;586    void DEBUG_UART_Init(void)
000000  b510              PUSH     {r4,lr}
;;;587    {
;;;588        SYS_ResetModule(UART1_RST);
000002  4815              LDR      r0,|L1.88|
000004  f7fffffe          BL       SYS_ResetModule
;;;589    
;;;590        /* Configure UART0 and set UART0 baud rate */
;;;591        UART_Open(DEBUG_UART_PORT, 115200);
000008  4c14              LDR      r4,|L1.92|
00000a  21e1              MOVS     r1,#0xe1
00000c  0249              LSLS     r1,r1,#9
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       UART_Open
;;;592        UART_EnableInt(DEBUG_UART_PORT, UART_IER_RDA_IEN_Msk | UART_IER_TOUT_IEN_Msk);
000014  2111              MOVS     r1,#0x11
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       UART_EnableInt
00001c  2001              MOVS     r0,#1
00001e  4910              LDR      r1,|L1.96|
000020  0340              LSLS     r0,r0,#13
000022  6008              STR      r0,[r1,#0]
;;;593        NVIC_EnableIRQ(DEBUG_UART_PORT_IRQn);
;;;594    	
;;;595    	#if (_debug_log_UART_ == 1)	//debug
;;;596    	LDROM_DEBUG("\r\nCLK_GetCPUFreq : %8d\r\n",CLK_GetHXTFreq());
000024  f7fffffe          BL       CLK_GetHXTFreq
000028  4601              MOV      r1,r0
00002a  a00e              ADR      r0,|L1.100|
00002c  f7fffffe          BL       __2printf
;;;597    	LDROM_DEBUG("CLK_GetHXTFreq : %8d\r\n",CLK_GetHCLKFreq());
000030  f7fffffe          BL       CLK_GetHCLKFreq
000034  4601              MOV      r1,r0
000036  a016              ADR      r0,|L1.144|
000038  f7fffffe          BL       __2printf
;;;598    	LDROM_DEBUG("CLK_GetLXTFreq : %8d\r\n",CLK_GetPCLKFreq());	
00003c  f7fffffe          BL       CLK_GetPCLKFreq
000040  4601              MOV      r1,r0
000042  a01e              ADR      r0,|L1.188|
000044  f7fffffe          BL       __2printf
;;;599    	LDROM_DEBUG("CLK_GetPCLK0Freq : %8d\r\n",CLK_GetCPUFreq());
000048  f7fffffe          BL       CLK_GetCPUFreq
00004c  4601              MOV      r1,r0
00004e  a026              ADR      r0,|L1.232|
000050  f7fffffe          BL       __2printf
;;;600    
;;;601    	#endif
;;;602    }
000054  bd10              POP      {r4,pc}
;;;603    
                          ENDP

000056  0000              DCW      0x0000
                  |L1.88|
                          DCD      0x04000011
                  |L1.92|
                          DCD      0x40150000
                  |L1.96|
                          DCD      0xe000e100
                  |L1.100|
000064  1b5b313b          DCB      27,"[1;36m[LDROM]\r\nCLK_GetCPUFreq : %8d\r\n",27,"[0m",0
000068  33366d5b
00006c  4c44524f
000070  4d5d0d0a
000074  434c4b5f
000078  47657443
00007c  50554672
000080  6571203a
000084  20253864
000088  0d0a1b5b
00008c  306d00  
00008f  00                DCB      0
                  |L1.144|
000090  1b5b313b          DCB      27,"[1;36m[LDROM]CLK_GetHXTFreq : %8d\r\n",27,"[0m",0
000094  33366d5b
000098  4c44524f
00009c  4d5d434c
0000a0  4b5f4765
0000a4  74485854
0000a8  46726571
0000ac  203a2025
0000b0  38640d0a
0000b4  1b5b306d
0000b8  00      
0000b9  00                DCB      0
0000ba  00                DCB      0
0000bb  00                DCB      0
                  |L1.188|
0000bc  1b5b313b          DCB      27,"[1;36m[LDROM]CLK_GetLXTFreq : %8d\r\n",27,"[0m",0
0000c0  33366d5b
0000c4  4c44524f
0000c8  4d5d434c
0000cc  4b5f4765
0000d0  744c5854
0000d4  46726571
0000d8  203a2025
0000dc  38640d0a
0000e0  1b5b306d
0000e4  00      
0000e5  00                DCB      0
0000e6  00                DCB      0
0000e7  00                DCB      0
                  |L1.232|
0000e8  1b5b313b          DCB      27,"[1;36m[LDROM]CLK_GetPCLK0Freq : %8d\r\n",27,"[0m",0
0000ec  33366d5b
0000f0  4c44524f
0000f4  4d5d434c
0000f8  4b5f4765
0000fc  7450434c
000100  4b304672
000104  6571203a
000108  20253864
00010c  0d0a1b5b
000110  306d00  
000113  00                DCB      0

                          AREA ||i.FMC_Read||, CODE, READONLY, ALIGN=2

                  FMC_Read PROC
;;;262     */
;;;263    static __INLINE uint32_t FMC_Read(uint32_t u32addr)
000000  4906              LDR      r1,|L2.28|
;;;264    {
;;;265        FMC->ISPCMD = FMC_ISPCMD_READ; /* Set ISP Command Code */
000002  2200              MOVS     r2,#0
000004  60ca              STR      r2,[r1,#0xc]
;;;266        FMC->ISPADR = u32addr;         /* Set Target ROM Address. The address must be word alignment. */
000006  6048              STR      r0,[r1,#4]
;;;267        FMC->ISPTRG = 0x1;             /* Trigger to start ISP procedure */
000008  2001              MOVS     r0,#1
00000a  6108              STR      r0,[r1,#0x10]
;;;268        __ISB();                       /* To make sure ISP/CPU be Synchronized */
00000c  f3bf8f6f          ISB      
                  |L2.16|
;;;269        while(FMC->ISPTRG);            /* Waiting for ISP Done */
000010  6908              LDR      r0,[r1,#0x10]
000012  2800              CMP      r0,#0
000014  d1fc              BNE      |L2.16|
;;;270    
;;;271        return FMC->ISPDAT;
000016  6888              LDR      r0,[r1,#8]
;;;272    }
000018  4770              BX       lr
;;;273    
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      0x5000c000

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=2

                  GPIO_Init PROC
;;;391    
;;;392    void GPIO_Init (void)
000000  b510              PUSH     {r4,lr}
;;;393    {
;;;394        SYS->GPB_MFP &= ~(SYS_GPB_MFP_PB14_Msk | SYS_GPB_MFP_PB14_Msk);
000002  2005              MOVS     r0,#5
000004  0700              LSLS     r0,r0,#28
000006  6b42              LDR      r2,[r0,#0x34]
000008  2101              MOVS     r1,#1
00000a  0389              LSLS     r1,r1,#14
00000c  438a              BICS     r2,r2,r1
00000e  6342              STR      r2,[r0,#0x34]
;;;395        SYS->GPB_MFP |= (SYS_GPB_MFP_PB14_GPIO | SYS_GPB_MFP_PB15_GPIO);
000010  6b42              LDR      r2,[r0,#0x34]
000012  6342              STR      r2,[r0,#0x34]
;;;396    
;;;397    	
;;;398        GPIO_SetMode(PB, BIT14, GPIO_PMD_OUTPUT);
000014  4c05              LDR      r4,|L3.44|
000016  2201              MOVS     r2,#1
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       GPIO_SetMode
;;;399        GPIO_SetMode(PB, BIT15, GPIO_PMD_OUTPUT);	
00001e  2201              MOVS     r2,#1
000020  03d1              LSLS     r1,r2,#15
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       GPIO_SetMode
;;;400    }
000028  bd10              POP      {r4,pc}
;;;401    
                          ENDP

00002a  0000              DCW      0x0000
                  |L3.44|
                          DCD      0x50004040

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;603    
;;;604    void SYS_Init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;605    {
;;;606        /* Unlock protected registers */
;;;607        SYS_UnlockReg();
000002  f7fffffe          BL       SYS_UnlockReg
;;;608    
;;;609        CLK_EnableXtalRC(CLK_PWRCON_OSC22M_EN_Msk);
000006  2004              MOVS     r0,#4
000008  f7fffffe          BL       CLK_EnableXtalRC
;;;610        CLK_WaitClockReady(CLK_CLKSTATUS_OSC22M_STB_Msk);
00000c  2010              MOVS     r0,#0x10
00000e  f7fffffe          BL       CLK_WaitClockReady
;;;611    
;;;612    //    CLK_EnableXtalRC(CLK_PWRCON_XTL12M_EN_Msk);
;;;613    //    CLK_WaitClockReady(CLK_CLKSTATUS_XTL12M_STB_Msk);
;;;614    
;;;615        /* Select HCLK clock source as HIRC and HCLK source divider as 1 */
;;;616        CLK_SetHCLK(CLK_CLKSEL0_HCLK_S_HIRC, CLK_CLKDIV_HCLK(1));
000012  2100              MOVS     r1,#0
000014  2007              MOVS     r0,#7
000016  f7fffffe          BL       CLK_SetHCLK
;;;617    
;;;618        /* Set core clock as PLL_CLOCK from PLL */
;;;619        CLK_SetCoreClock(PLL_CLOCK);
00001a  481f              LDR      r0,|L4.152|
00001c  f7fffffe          BL       CLK_SetCoreClock
;;;620    
;;;621        CLK_EnableModuleClock(UART0_MODULE);
000020  4d1e              LDR      r5,|L4.156|
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       CLK_EnableModuleClock
;;;622        CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART_S_HIRC, CLK_CLKDIV_UART(1));
000028  2403              MOVS     r4,#3
00002a  0624              LSLS     r4,r4,#24
00002c  2200              MOVS     r2,#0
00002e  4621              MOV      r1,r4
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       CLK_SetModuleClock
;;;623    
;;;624        CLK_EnableModuleClock(UART1_MODULE);
000036  1c6d              ADDS     r5,r5,#1
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       CLK_EnableModuleClock
;;;625        CLK_SetModuleClock(UART1_MODULE, CLK_CLKSEL1_UART_S_HIRC, CLK_CLKDIV_UART(1));
00003e  2200              MOVS     r2,#0
000040  4621              MOV      r1,r4
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       CLK_SetModuleClock
;;;626    
;;;627        CLK_EnableModuleClock(TMR0_MODULE);
000048  4c15              LDR      r4,|L4.160|
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       CLK_EnableModuleClock
;;;628      	CLK_SetModuleClock(TMR0_MODULE, CLK_CLKSEL1_TMR0_S_HIRC, 0);
000050  2107              MOVS     r1,#7
000052  2200              MOVS     r2,#0
000054  0209              LSLS     r1,r1,#8
000056  4620              MOV      r0,r4
000058  f7fffffe          BL       CLK_SetModuleClock
;;;629    
;;;630        CLK_EnableModuleClock(TMR1_MODULE);
00005c  4c11              LDR      r4,|L4.164|
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       CLK_EnableModuleClock
;;;631      	CLK_SetModuleClock(TMR1_MODULE, CLK_CLKSEL1_TMR1_S_HIRC, 0);
000064  2107              MOVS     r1,#7
000066  2200              MOVS     r2,#0
000068  0309              LSLS     r1,r1,#12
00006a  4620              MOV      r0,r4
00006c  f7fffffe          BL       CLK_SetModuleClock
;;;632    
;;;633        // UART 0 for ISP 
;;;634        /* Set GPB multi-function pins for UART0 RXD and TXD */
;;;635        SYS->GPB_MFP &= ~(SYS_GPB_MFP_PB0_Msk | SYS_GPB_MFP_PB1_Msk);
000070  2005              MOVS     r0,#5
000072  0700              LSLS     r0,r0,#28
000074  6b41              LDR      r1,[r0,#0x34]
000076  0889              LSRS     r1,r1,#2
000078  0089              LSLS     r1,r1,#2
00007a  6341              STR      r1,[r0,#0x34]
;;;636        SYS->GPB_MFP |= (SYS_GPB_MFP_PB0_UART0_RXD | SYS_GPB_MFP_PB1_UART0_TXD);
00007c  6b41              LDR      r1,[r0,#0x34]
00007e  2203              MOVS     r2,#3
000080  4311              ORRS     r1,r1,r2
000082  6341              STR      r1,[r0,#0x34]
;;;637    
;;;638    	// UART 1 for debug
;;;639        SYS->GPB_MFP &= ~(SYS_GPB_MFP_PB4_Msk | SYS_GPB_MFP_PB5_Msk);
000084  6b42              LDR      r2,[r0,#0x34]
000086  2130              MOVS     r1,#0x30
000088  438a              BICS     r2,r2,r1
00008a  6342              STR      r2,[r0,#0x34]
;;;640        SYS->GPB_MFP |= (SYS_GPB_MFP_PB4_UART1_RXD | SYS_GPB_MFP_PB5_UART1_TXD);
00008c  6b42              LDR      r2,[r0,#0x34]
00008e  430a              ORRS     r2,r2,r1
000090  6342              STR      r2,[r0,#0x34]
;;;641    
;;;642       /* Update System Core Clock */
;;;643        SystemCoreClockUpdate();
000092  f7fffffe          BL       SystemCoreClockUpdate
;;;644    }
000096  bd70              POP      {r4-r6,pc}
;;;645    
                          ENDP

                  |L4.152|
                          DCD      0x02faf080
                  |L4.156|
                          DCD      0x57803d10
                  |L4.160|
                          DCD      0x5e800002
                  |L4.164|
                          DCD      0x5ec00003

                          AREA ||i.SYS_UnlockReg||, CODE, READONLY, ALIGN=2

                  SYS_UnlockReg PROC
;;;1844     */
;;;1845   static __INLINE void SYS_UnlockReg(void)
000000  b510              PUSH     {r4,lr}
;;;1846   {
;;;1847       while(SYS->REGWRPROT != SYS_REGWRPROT_REGPROTDIS_Msk)
;;;1848       {
;;;1849           SYS->REGWRPROT = 0x59;
000002  2159              MOVS     r1,#0x59
;;;1850           SYS->REGWRPROT = 0x16;
000004  2316              MOVS     r3,#0x16
000006  4805              LDR      r0,|L5.28|
;;;1851           SYS->REGWRPROT = 0x88;
000008  2288              MOVS     r2,#0x88
00000a  e002              B        |L5.18|
                  |L5.12|
00000c  6001              STR      r1,[r0,#0]            ;1849
00000e  6003              STR      r3,[r0,#0]            ;1850
000010  6002              STR      r2,[r0,#0]
                  |L5.18|
000012  6804              LDR      r4,[r0,#0]            ;1847
000014  2c01              CMP      r4,#1                 ;1847
000016  d1f9              BNE      |L5.12|
;;;1852       }
;;;1853   }
000018  bd10              POP      {r4,pc}
;;;1854   
                          ENDP

00001a  0000              DCW      0x0000
                  |L5.28|
                          DCD      0x50000100

                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  SysTick_Handler PROC
;;;489    
;;;490    void SysTick_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;491    {
;;;492    	static uint32_t LOG = 0;   
;;;493    
;;;494        systick_counter();
000002  f7fffffe          BL       systick_counter
000006  4c0a              LDR      r4,|L6.48|
000008  68a0              LDR      r0,[r4,#8]  ; counter_systick
00000a  1c40              ADDS     r0,r0,#1
;;;495        if (get_systick() >= 0xFFFFFFFF)
00000c  d100              BNE      |L6.16|
00000e  60a0              STR      r0,[r4,#8]  ; counter_systick
                  |L6.16|
000010  68a0              LDR      r0,[r4,#8]  ; counter_systick
;;;496        {
;;;497          set_systick(0);      
;;;498        }
;;;499    
;;;500        if ((get_systick() % 1000) == 0)
000012  217d              MOVS     r1,#0x7d
000014  00c9              LSLS     r1,r1,#3
000016  f7fffffe          BL       __aeabi_uidivmod
00001a  2900              CMP      r1,#0
00001c  d106              BNE      |L6.44|
;;;501        {
;;;502            printf("%s : %4d\r\n",__FUNCTION__,LOG++);
00001e  6962              LDR      r2,[r4,#0x14]  ; LOG
000020  4904              LDR      r1,|L6.52|
000022  1c50              ADDS     r0,r2,#1
000024  6160              STR      r0,[r4,#0x14]  ; LOG
000026  a004              ADR      r0,|L6.56|
000028  f7fffffe          BL       __2printf
                  |L6.44|
;;;503        }
;;;504    
;;;505        #if defined (ENABLE_TICK_EVENT)
;;;506        TickCheckTickEvent();
;;;507        #endif    
;;;508    }
00002c  bd10              POP      {r4,pc}
;;;509    
                          ENDP

00002e  0000              DCW      0x0000
                  |L6.48|
                          DCD      ||.data||
                  |L6.52|
                          DCD      ||.constdata||+0xf
                  |L6.56|
000038  2573203a          DCB      "%s : %4d\r\n",0
00003c  20253464
000040  0d0a00  
000043  00                DCB      0

                          AREA ||i.TIMER1_Init||, CODE, READONLY, ALIGN=2

                  TIMER1_Init PROC
;;;535    
;;;536    void TIMER1_Init(void)
000000  b510              PUSH     {r4,lr}
;;;537    {
;;;538        TIMER_Open(TIMER1, TIMER_PERIODIC_MODE, 1);
000002  4c07              LDR      r4,|L7.32|
000004  2201              MOVS     r2,#1
000006  06d1              LSLS     r1,r2,#27
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       TIMER_Open
00000e  6821              LDR      r1,[r4,#0]
000010  0622              LSLS     r2,r4,#24
000012  4311              ORRS     r1,r1,r2
000014  6021              STR      r1,[r4,#0]
000016  4903              LDR      r1,|L7.36|
000018  1510              ASRS     r0,r2,#20
00001a  6008              STR      r0,[r1,#0]
;;;539        TIMER_EnableInt(TIMER1);
;;;540        NVIC_EnableIRQ(TMR1_IRQn);	
;;;541    //    TIMER_Start(TIMER1);
;;;542    }
00001c  bd10              POP      {r4,pc}
;;;543    
                          ENDP

00001e  0000              DCW      0x0000
                  |L7.32|
                          DCD      0x40010020
                  |L7.36|
                          DCD      0xe000e100

                          AREA ||i.TMR1_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR1_IRQHandler PROC
;;;524    
;;;525    void TMR1_IRQHandler(void)
000000  4805              LDR      r0,|L8.24|
000002  6881              LDR      r1,[r0,#8]
000004  07c9              LSLS     r1,r1,#31
000006  0fc9              LSRS     r1,r1,#31
;;;526    {
000008  d005              BEQ      |L8.22|
00000a  2101              MOVS     r1,#1
00000c  6081              STR      r1,[r0,#8]
;;;527    	
;;;528        if(TIMER_GetIntFlag(TIMER1) == 1)
;;;529        {
;;;530            TIMER_ClearIntFlag(TIMER1);
;;;531            timeout_cnt++;
00000e  4803              LDR      r0,|L8.28|
000010  68c1              LDR      r1,[r0,#0xc]  ; timeout_cnt
000012  1c49              ADDS     r1,r1,#1
000014  60c1              STR      r1,[r0,#0xc]  ; timeout_cnt
                  |L8.22|
;;;532        }
;;;533    }
000016  4770              BX       lr
;;;534    
                          ENDP

                  |L8.24|
                          DCD      0x40010020
                  |L8.28|
                          DCD      ||.data||

                          AREA ||i.UART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART1_IRQHandler PROC
;;;569    
;;;570    void DEBUG_UART_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;571    {
;;;572        if(UART_GET_INT_FLAG(DEBUG_UART_PORT, UART_ISR_RDA_INT_Msk | UART_ISR_TOUT_IF_Msk))     /* UART receive data available flag */
000002  4c0b              LDR      r4,|L9.48|
000004  69e0              LDR      r0,[r4,#0x1c]
000006  21ff              MOVS     r1,#0xff
000008  3111              ADDS     r1,r1,#0x11
00000a  4208              TST      r0,r1
00000c  d102              BNE      |L9.20|
00000e  e004              B        |L9.26|
                  |L9.16|
;;;573        {
;;;574            while(UART_GET_RX_EMPTY(DEBUG_UART_PORT) == 0)
;;;575            {
;;;576    			UARTx_Process();
000010  f7fffffe          BL       UARTx_Process
                  |L9.20|
000014  69a1              LDR      r1,[r4,#0x18]         ;574
000016  0449              LSLS     r1,r1,#17             ;574
000018  d5fa              BPL      |L9.16|
                  |L9.26|
;;;577            }
;;;578        }
;;;579    
;;;580        if(DEBUG_UART_PORT->FSR & (UART_FSR_BIF_Msk | UART_FSR_FEF_Msk | UART_FSR_PEF_Msk | UART_FSR_RX_OVER_IF_Msk))
00001a  69a1              LDR      r1,[r4,#0x18]
00001c  4620              MOV      r0,r4
00001e  2271              MOVS     r2,#0x71
000020  4211              TST      r1,r2
000022  d003              BEQ      |L9.44|
;;;581        {
;;;582            UART_ClearIntFlag(DEBUG_UART_PORT, (UART_ISR_RLS_INT_Msk| UART_ISR_BUF_ERR_INT_Msk));
000024  2109              MOVS     r1,#9
000026  0289              LSLS     r1,r1,#10
000028  f7fffffe          BL       UART_ClearIntFlag
                  |L9.44|
;;;583        }	
;;;584    }
00002c  bd10              POP      {r4,pc}
;;;585    
                          ENDP

00002e  0000              DCW      0x0000
                  |L9.48|
                          DCD      0x40150000

                          AREA ||i.UARTx_Process||, CODE, READONLY, ALIGN=2

                  UARTx_Process PROC
;;;543    
;;;544    void UARTx_Process(void)
000000  b510              PUSH     {r4,lr}
;;;545    {
;;;546    	uint8_t res = 0;
;;;547    	res = UART_READ(DEBUG_UART_PORT);
000002  480e              LDR      r0,|L10.60|
000004  6800              LDR      r0,[r0,#0]
000006  b2c0              UXTB     r0,r0
;;;548    
;;;549    	if (res > 0x7F)
000008  287f              CMP      r0,#0x7f
00000a  d903              BLS      |L10.20|
;;;550    	{
;;;551    		LDROM_DEBUG("invalid command\r\n");
00000c  a00c              ADR      r0,|L10.64|
00000e  f7fffffe          BL       __2printf
                  |L10.18|
;;;552    	}
;;;553    	else
;;;554    	{
;;;555    		switch(res)
;;;556    		{
;;;557    			case '1':
;;;558    				break;
;;;559    
;;;560    			case 'X':
;;;561    			case 'x':
;;;562    			case 'Z':
;;;563    			case 'z':
;;;564    				NVIC_SystemReset();		
;;;565    				break;
;;;566    		}
;;;567    	}
;;;568    }
000012  bd10              POP      {r4,pc}
                  |L10.20|
000014  285a              CMP      r0,#0x5a              ;555
000016  d009              BEQ      |L10.44|
000018  dc04              BGT      |L10.36|
00001a  2831              CMP      r0,#0x31              ;555
00001c  d0f9              BEQ      |L10.18|
00001e  2858              CMP      r0,#0x58              ;555
000020  d1f7              BNE      |L10.18|
000022  e003              B        |L10.44|
                  |L10.36|
000024  2878              CMP      r0,#0x78              ;555
000026  d001              BEQ      |L10.44|
000028  287a              CMP      r0,#0x7a              ;555
00002a  d1f2              BNE      |L10.18|
                  |L10.44|
00002c  f3bf8f4f          DSB                            ;555
000030  490d              LDR      r1,|L10.104|
000032  480c              LDR      r0,|L10.100|
000034  60c8              STR      r0,[r1,#0xc]          ;555
000036  f3bf8f4f          DSB                            ;555
                  |L10.58|
00003a  e7fe              B        |L10.58|
;;;569    
                          ENDP

                  |L10.60|
                          DCD      0x40150000
                  |L10.64|
000040  1b5b313b          DCB      27,"[1;36m[LDROM]invalid command\r\n",27,"[0m",0
000044  33366d5b
000048  4c44524f
00004c  4d5d696e
000050  76616c69
000054  6420636f
000058  6d6d616e
00005c  640d0a1b
000060  5b306d00
                  |L10.100|
                          DCD      0x05fa0004
                  |L10.104|
                          DCD      0xe000ed00

                          AREA ||i.UPDC32||, CODE, READONLY, ALIGN=2

                  UPDC32 PROC
;;;278    
;;;279    unsigned long UPDC32(unsigned char octet, unsigned long crc)
000000  4048              EORS     r0,r0,r1
;;;280    {
;;;281        // The original code had this as a #define
;;;282        return table[(crc ^ octet) & 0xFF] ^ (crc >> 8);
000002  0600              LSLS     r0,r0,#24
000004  4a02              LDR      r2,|L11.16|
000006  0d80              LSRS     r0,r0,#22
000008  5810              LDR      r0,[r2,r0]
00000a  0a09              LSRS     r1,r1,#8
00000c  4048              EORS     r0,r0,r1
;;;283    }
00000e  4770              BX       lr
;;;284    
                          ENDP

                  |L11.16|
                          DCD      ||.bss||

                          AREA ||i.caculate_crc32_checksum||, CODE, READONLY, ALIGN=2

                  caculate_crc32_checksum PROC
;;;340    
;;;341    uint32_t caculate_crc32_checksum(uint32_t start, uint32_t size)
000000  b57c              PUSH     {r2-r6,lr}
;;;342    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;343        volatile uint32_t addr, data;    
;;;344    
;;;345        #if defined (USE_FLASH_TABLE)
;;;346        LDROM_DEBUG("ENABLE_SW_CRC32:[FLASH_TABLE]\r\n");    
;;;347        #elif defined (USE_SRAM_TABLE)
;;;348        LDROM_DEBUG("ENABLE_SW_CRC32:[SRAM_TABLE]\r\n");       
000006  a01a              ADR      r0,|L12.112|
000008  f7fffffe          BL       __2printf
;;;349        calculate_table();
00000c  f7fffffe          BL       calculate_table
;;;350        #endif
;;;351    
;;;352        state = 0xFFFFFFFF;    
000010  2000              MOVS     r0,#0
000012  4c24              LDR      r4,|L12.164|
000014  43c0              MVNS     r0,r0
;;;353        addr = start;
000016  6120              STR      r0,[r4,#0x10]  ; state
;;;354    
;;;355        for(addr = start; addr < (start+size) ; addr += 4){
000018  9500              STR      r5,[sp,#0]
00001a  19ad              ADDS     r5,r5,r6
00001c  9800              LDR      r0,[sp,#0]
00001e  e021              B        |L12.100|
                  |L12.32|
;;;356            data = FMC_Read(addr);
000020  f7fffffe          BL       FMC_Read
;;;357            state = UPDC32(_GET_BYTE0(data), state);
000024  9001              STR      r0,[sp,#4]
000026  b2c0              UXTB     r0,r0
000028  6921              LDR      r1,[r4,#0x10]  ; state
00002a  f7fffffe          BL       UPDC32
;;;358            state = UPDC32(_GET_BYTE1(data), state);
00002e  6120              STR      r0,[r4,#0x10]  ; state
000030  9901              LDR      r1,[sp,#4]
000032  0409              LSLS     r1,r1,#16
000034  0e0a              LSRS     r2,r1,#24
000036  4601              MOV      r1,r0
000038  4610              MOV      r0,r2
00003a  f7fffffe          BL       UPDC32
;;;359            state = UPDC32(_GET_BYTE2(data), state);
00003e  6120              STR      r0,[r4,#0x10]  ; state
000040  9901              LDR      r1,[sp,#4]
000042  0209              LSLS     r1,r1,#8
000044  0e0a              LSRS     r2,r1,#24
000046  4601              MOV      r1,r0
000048  4610              MOV      r0,r2
00004a  f7fffffe          BL       UPDC32
;;;360            state = UPDC32(_GET_BYTE3(data), state); 
00004e  6120              STR      r0,[r4,#0x10]  ; state
000050  9901              LDR      r1,[sp,#4]
000052  0e0a              LSRS     r2,r1,#24
000054  4601              MOV      r1,r0
000056  4610              MOV      r0,r2
000058  f7fffffe          BL       UPDC32
00005c  6120              STR      r0,[r4,#0x10]         ;355  ; state
00005e  9800              LDR      r0,[sp,#0]            ;355
000060  1d00              ADDS     r0,r0,#4              ;355
000062  9000              STR      r0,[sp,#0]            ;355
                  |L12.100|
000064  4285              CMP      r5,r0                 ;355
000066  d8db              BHI      |L12.32|
;;;361        }
;;;362    
;;;363        return ~state;  
000068  6920              LDR      r0,[r4,#0x10]  ; state
00006a  43c0              MVNS     r0,r0
;;;364    
;;;365    }
00006c  bd7c              POP      {r2-r6,pc}
;;;366    
                          ENDP

00006e  0000              DCW      0x0000
                  |L12.112|
000070  1b5b313b          DCB      27,"[1;36m[LDROM]ENABLE_SW_CRC32:[SRAM_TABLE]\r\n",27,"["
000074  33366d5b
000078  4c44524f
00007c  4d5d454e
000080  41424c45
000084  5f53575f
000088  43524333
00008c  323a5b53
000090  52414d5f
000094  5441424c
000098  455d0d0a
00009c  1b5b    
00009e  306d00            DCB      "0m",0
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0
                  |L12.164|
                          DCD      ||.data||

                          AREA ||i.calculate_table||, CODE, READONLY, ALIGN=2

                  calculate_table PROC
;;;261    #define POLYNOMIAL 0xedb88320
;;;262    void calculate_table(void)
000000  b530              PUSH     {r4,r5,lr}
;;;263    {
;;;264        unsigned b = 0;
;;;265        unsigned long v = 0;
;;;266        int i = 0;
;;;267    
;;;268        for (b = 0; b < 256; ++b)
;;;269        {
;;;270            v = b;
;;;271            i = 8;
;;;272            for (; --i >= 0; )
;;;273                v = (v & 1) ? ((v >> 1) ^ POLYNOMIAL) : (v >> 1);
000002  4b0a              LDR      r3,|L13.44|
;;;274            table[b] = v;
000004  4c0a              LDR      r4,|L13.48|
000006  2100              MOVS     r1,#0                 ;264
                  |L13.8|
000008  4608              MOV      r0,r1                 ;270
00000a  2208              MOVS     r2,#8                 ;271
00000c  e005              B        |L13.26|
                  |L13.14|
00000e  07c5              LSLS     r5,r0,#31             ;273
000010  d002              BEQ      |L13.24|
000012  0840              LSRS     r0,r0,#1              ;273
000014  4058              EORS     r0,r0,r3              ;273
000016  e000              B        |L13.26|
                  |L13.24|
000018  0840              LSRS     r0,r0,#1              ;273
                  |L13.26|
00001a  1e52              SUBS     r2,r2,#1              ;273
00001c  d5f7              BPL      |L13.14|
00001e  008a              LSLS     r2,r1,#2
000020  1c49              ADDS     r1,r1,#1
000022  50a0              STR      r0,[r4,r2]
000024  29ff              CMP      r1,#0xff              ;268
000026  d9ef              BLS      |L13.8|
;;;275        }
;;;276    }
000028  bd30              POP      {r4,r5,pc}
;;;277    #endif
                          ENDP

00002a  0000              DCW      0x0000
                  |L13.44|
                          DCD      0xedb88320
                  |L13.48|
                          DCD      ||.bss||

                          AREA ||i.check_reset_source||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  check_reset_source PROC
;;;289    //
;;;290    uint8_t check_reset_source(void)
000000  b570              PUSH     {r4-r6,lr}
;;;291    {
;;;292        uint8_t tag = 0;
;;;293        uint32_t src = SYS_GetResetSrc();
000002  f7fffffe          BL       SYS_GetResetSrc
000006  4605              MOV      r5,r0
;;;294    
;;;295        SYS->RSTSRC |= 0xFF;
000008  2005              MOVS     r0,#5
00000a  0700              LSLS     r0,r0,#28
00000c  6841              LDR      r1,[r0,#4]
00000e  22ff              MOVS     r2,#0xff
000010  4311              ORRS     r1,r1,r2
000012  6041              STR      r1,[r0,#4]
;;;296        LDROM_DEBUG("Reset Source <0x%08X>\r\n", src);
000014  4629              MOV      r1,r5
000016  a01f              ADR      r0,|L14.148|
000018  f7fffffe          BL       __2printf
;;;297       
;;;298        tag = read_magic_tag();
00001c  f7fffffe          BL       read_magic_tag
000020  4604              MOV      r4,r0
;;;299        
;;;300        if (src & SYS_RSTSRC_RSTS_POR_Msk) 
000022  07e8              LSLS     r0,r5,#31
000024  d012              BEQ      |L14.76|
;;;301        {
;;;302            SYS_ClearResetSrc(SYS_RSTSRC_RSTS_POR_Msk);            
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       SYS_ClearResetSrc
;;;303            if (tag == 0xA5) {
00002c  2ca5              CMP      r4,#0xa5
00002e  d003              BEQ      |L14.56|
;;;304                write_magic_tag(0);
;;;305                LDROM_DEBUG("Enter BOOTLOADER from APPLICATION(POR)\r\n");
;;;306                return TRUE;
;;;307            } else if (tag == 0xBB) {
000030  2cbb              CMP      r4,#0xbb
000032  d006              BEQ      |L14.66|
;;;308                write_magic_tag(0);
;;;309                LDROM_DEBUG("Upgrade finished...(POR)\r\n");
;;;310                return FALSE;
;;;311            } else {
;;;312                LDROM_DEBUG("Enter BOOTLOADER from POR\r\n");
000034  a022              ADR      r0,|L14.192|
;;;313                return FALSE;
000036  e027              B        |L14.136|
                  |L14.56|
000038  2000              MOVS     r0,#0                 ;304
00003a  f7fffffe          BL       write_magic_tag
00003e  a02c              ADR      r0,|L14.240|
000040  e013              B        |L14.106|
                  |L14.66|
000042  2000              MOVS     r0,#0                 ;308
000044  f7fffffe          BL       write_magic_tag
000048  a038              ADR      r0,|L14.300|
00004a  e01d              B        |L14.136|
                  |L14.76|
;;;314            }
;;;315        } else if (src & SYS_RSTSRC_RSTS_CPU_Msk)
00004c  0628              LSLS     r0,r5,#24
00004e  d515              BPL      |L14.124|
;;;316        {
;;;317            SYS_ClearResetSrc(SYS_RSTSRC_RSTS_CPU_Msk);        
000050  2080              MOVS     r0,#0x80
000052  f7fffffe          BL       SYS_ClearResetSrc
;;;318            if (tag == 0xA5) {
000056  2ca5              CMP      r4,#0xa5
000058  d003              BEQ      |L14.98|
;;;319                write_magic_tag(0);
;;;320                LDROM_DEBUG("Enter BOOTLOADER from APPLICATION(CPU)\r\n");
;;;321                return TRUE;
;;;322            } else if (tag == 0xBB) {
00005a  2cbb              CMP      r4,#0xbb
00005c  d009              BEQ      |L14.114|
;;;323                write_magic_tag(0);
;;;324                LDROM_DEBUG("Upgrade finished...(CPU)\r\n");
;;;325                return FALSE;
;;;326            } else {
;;;327                LDROM_DEBUG("Enter BOOTLOADER from CPU reset\r\n");
00005e  a03f              ADR      r0,|L14.348|
;;;328                return FALSE;
000060  e012              B        |L14.136|
                  |L14.98|
000062  2000              MOVS     r0,#0                 ;319
000064  f7fffffe          BL       write_magic_tag
000068  a049              ADR      r0,|L14.400|
                  |L14.106|
00006a  f7fffffe          BL       __2printf
00006e  2001              MOVS     r0,#1                 ;321
;;;329            }          
;;;330        } else if (src & SYS_RSTSRC_RSTS_RESET_Msk)
;;;331        {
;;;332            SYS_ClearResetSrc(SYS_RSTSRC_RSTS_RESET_Msk);
;;;333            LDROM_DEBUG("Enter BOOTLOADER from nRESET pin\r\n");
;;;334            return FALSE;
;;;335        }
;;;336        
;;;337        LDROM_DEBUG("Enter BOOTLOADER from unhandle reset source\r\n");
;;;338        return FALSE;
;;;339    }
000070  bd70              POP      {r4-r6,pc}
                  |L14.114|
000072  2000              MOVS     r0,#0                 ;323
000074  f7fffffe          BL       write_magic_tag
000078  a054              ADR      r0,|L14.460|
00007a  e005              B        |L14.136|
                  |L14.124|
00007c  07a8              LSLS     r0,r5,#30             ;330
00007e  d507              BPL      |L14.144|
000080  2002              MOVS     r0,#2                 ;332
000082  f7fffffe          BL       SYS_ClearResetSrc
000086  a05d              ADR      r0,|L14.508|
                  |L14.136|
000088  f7fffffe          BL       __2printf
00008c  2000              MOVS     r0,#0                 ;338
00008e  bd70              POP      {r4-r6,pc}
                  |L14.144|
000090  a068              ADR      r0,|L14.564|
000092  e7f9              B        |L14.136|
;;;340    
                          ENDP

                  |L14.148|
000094  1b5b313b          DCB      27,"[1;36m[LDROM]Reset Source <0x%08X>\r\n",27,"[0m",0
000098  33366d5b
00009c  4c44524f
0000a0  4d5d5265
0000a4  73657420
0000a8  536f7572
0000ac  6365203c
0000b0  30782530
0000b4  38583e0d
0000b8  0a1b5b30
0000bc  6d00    
0000be  00                DCB      0
0000bf  00                DCB      0
                  |L14.192|
0000c0  1b5b313b          DCB      27,"[1;36m[LDROM]Enter BOOTLOADER from POR\r\n",27,"[0m",0
0000c4  33366d5b
0000c8  4c44524f
0000cc  4d5d456e
0000d0  74657220
0000d4  424f4f54
0000d8  4c4f4144
0000dc  45522066
0000e0  726f6d20
0000e4  504f520d
0000e8  0a1b5b30
0000ec  6d00    
0000ee  00                DCB      0
0000ef  00                DCB      0
                  |L14.240|
0000f0  1b5b313b          DCB      27,"[1;36m[LDROM]Enter BOOTLOADER from APPLICATION(POR)\r"
0000f4  33366d5b
0000f8  4c44524f
0000fc  4d5d456e
000100  74657220
000104  424f4f54
000108  4c4f4144
00010c  45522066
000110  726f6d20
000114  4150504c
000118  49434154
00011c  494f4e28
000120  504f5229
000124  0d      
000125  0a1b5b30          DCB      "\n",27,"[0m",0
000129  6d00    
00012b  00                DCB      0
                  |L14.300|
00012c  1b5b313b          DCB      27,"[1;36m[LDROM]Upgrade finished...(POR)\r\n",27,"[0m",0
000130  33366d5b
000134  4c44524f
000138  4d5d5570
00013c  67726164
000140  65206669
000144  6e697368
000148  65642e2e
00014c  2e28504f
000150  52290d0a
000154  1b5b306d
000158  00      
000159  00                DCB      0
00015a  00                DCB      0
00015b  00                DCB      0
                  |L14.348|
00015c  1b5b313b          DCB      27,"[1;36m[LDROM]Enter BOOTLOADER from CPU reset\r\n",27
000160  33366d5b
000164  4c44524f
000168  4d5d456e
00016c  74657220
000170  424f4f54
000174  4c4f4144
000178  45522066
00017c  726f6d20
000180  43505520
000184  72657365
000188  740d0a1b
00018c  5b306d00          DCB      "[0m",0
                  |L14.400|
000190  1b5b313b          DCB      27,"[1;36m[LDROM]Enter BOOTLOADER from APPLICATION(CPU)\r"
000194  33366d5b
000198  4c44524f
00019c  4d5d456e
0001a0  74657220
0001a4  424f4f54
0001a8  4c4f4144
0001ac  45522066
0001b0  726f6d20
0001b4  4150504c
0001b8  49434154
0001bc  494f4e28
0001c0  43505529
0001c4  0d      
0001c5  0a1b5b30          DCB      "\n",27,"[0m",0
0001c9  6d00    
0001cb  00                DCB      0
                  |L14.460|
0001cc  1b5b313b          DCB      27,"[1;36m[LDROM]Upgrade finished...(CPU)\r\n",27,"[0m",0
0001d0  33366d5b
0001d4  4c44524f
0001d8  4d5d5570
0001dc  67726164
0001e0  65206669
0001e4  6e697368
0001e8  65642e2e
0001ec  2e284350
0001f0  55290d0a
0001f4  1b5b306d
0001f8  00      
0001f9  00                DCB      0
0001fa  00                DCB      0
0001fb  00                DCB      0
                  |L14.508|
0001fc  1b5b313b          DCB      27,"[1;36m[LDROM]Enter BOOTLOADER from nRESET pin\r\n",27
000200  33366d5b
000204  4c44524f
000208  4d5d456e
00020c  74657220
000210  424f4f54
000214  4c4f4144
000218  45522066
00021c  726f6d20
000220  6e524553
000224  45542070
000228  696e0d0a
00022c  1b      
00022d  5b306d00          DCB      "[0m",0
000231  00                DCB      0
000232  00                DCB      0
000233  00                DCB      0
                  |L14.564|
000234  1b5b313b          DCB      27,"[1;36m[LDROM]Enter BOOTLOADER from unhandle reset so"
000238  33366d5b
00023c  4c44524f
000240  4d5d456e
000244  74657220
000248  424f4f54
00024c  4c4f4144
000250  45522066
000254  726f6d20
000258  756e6861
00025c  6e646c65
000260  20726573
000264  65742073
000268  6f      
000269  75726365          DCB      "urce\r\n",27,"[0m",0
00026d  0d0a1b5b
000271  306d00  

                          AREA ||i.compare_buffer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  compare_buffer PROC
;;;103    
;;;104    void compare_buffer(uint8_t *src, uint8_t *des, int nBytes)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;105    {
;;;106        uint16_t i = 0;	
000002  2400              MOVS     r4,#0
000004  4617              MOV      r7,r2                 ;105
;;;107    	
;;;108        for (i = 0; i < nBytes; i++)
;;;109        {
;;;110            if (src[i] != des[i])
;;;111            {
;;;112                printf("error idx : %4d : 0x%2X , 0x%2X\r\n", i , src[i],des[i]);
;;;113    			set_flag(flag_error , ENABLE);
000006  2602              MOVS     r6,#2
000008  4d0e              LDR      r5,|L15.68|
00000a  e00e              B        |L15.42|
                  |L15.12|
00000c  9800              LDR      r0,[sp,#0]            ;110
00000e  5d02              LDRB     r2,[r0,r4]            ;110
000010  9801              LDR      r0,[sp,#4]            ;110
000012  5d03              LDRB     r3,[r0,r4]            ;110
000014  429a              CMP      r2,r3                 ;110
000016  d006              BEQ      |L15.38|
000018  4621              MOV      r1,r4                 ;112
00001a  a00b              ADR      r0,|L15.72|
00001c  f7fffffe          BL       __2printf
000020  6828              LDR      r0,[r5,#0]  ; BitFlag
000022  4330              ORRS     r0,r0,r6
000024  6028              STR      r0,[r5,#0]  ; BitFlag
                  |L15.38|
000026  1c64              ADDS     r4,r4,#1
000028  b2a4              UXTH     r4,r4                 ;108
                  |L15.42|
00002a  42bc              CMP      r4,r7                 ;108
00002c  dbee              BLT      |L15.12|
;;;114            }
;;;115        }
;;;116    
;;;117    	if (!is_flag_set(flag_error))
00002e  6828              LDR      r0,[r5,#0]  ; BitFlag
000030  0780              LSLS     r0,r0,#30
000032  d406              BMI      |L15.66|
;;;118    	{
;;;119        	printf("%s finish \r\n" , __FUNCTION__);	
000034  490d              LDR      r1,|L15.108|
000036  a00e              ADR      r0,|L15.112|
000038  f7fffffe          BL       __2printf
;;;120    		set_flag(flag_error , DISABLE);
00003c  6828              LDR      r0,[r5,#0]  ; BitFlag
00003e  43b0              BICS     r0,r0,r6
000040  6028              STR      r0,[r5,#0]  ; BitFlag
                  |L15.66|
;;;121    	}
;;;122    
;;;123    }
000042  bdfe              POP      {r1-r7,pc}
;;;124    
                          ENDP

                  |L15.68|
                          DCD      ||.data||
                  |L15.72|
000048  6572726f          DCB      "error idx : %4d : 0x%2X , 0x%2X\r\n",0
00004c  72206964
000050  78203a20
000054  25346420
000058  3a203078
00005c  25325820
000060  2c203078
000064  2532580d
000068  0a00    
00006a  00                DCB      0
00006b  00                DCB      0
                  |L15.108|
                          DCD      ||.constdata||
                  |L15.112|
000070  25732066          DCB      "%s finish \r\n",0
000074  696e6973
000078  68200d0a
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0

                          AREA ||i.copy_buffer||, CODE, READONLY, ALIGN=1

                  copy_buffer PROC
;;;140    
;;;141    void copy_buffer(void *dest, void *src, unsigned int size)
000000  b510              PUSH     {r4,lr}
;;;142    {
;;;143        uint8_t *pu8Src, *pu8Dest;
;;;144        unsigned int i;
;;;145        
;;;146        pu8Dest = (uint8_t *)dest;
;;;147        pu8Src  = (uint8_t *)src;
;;;148    
;;;149    
;;;150    	#if 0
;;;151    	  while (size--)
;;;152    	    *pu8Dest++ = *pu8Src++;
;;;153    	#else
;;;154        for (i = 0; i < size; i++)
000002  2300              MOVS     r3,#0
000004  e002              B        |L16.12|
                  |L16.6|
;;;155            pu8Dest[i] = pu8Src[i];
000006  5ccc              LDRB     r4,[r1,r3]
000008  54c4              STRB     r4,[r0,r3]
00000a  1c5b              ADDS     r3,r3,#1
                  |L16.12|
00000c  4293              CMP      r3,r2                 ;154
00000e  d3fa              BCC      |L16.6|
;;;156    	#endif
;;;157    }
000010  bd10              POP      {r4,pc}
;;;158    
                          ENDP


                          AREA ||i.delay_ms||, CODE, READONLY, ALIGN=2

                  delay_ms PROC
;;;201    
;;;202    void delay_ms(uint16_t ms)
000000  217d              MOVS     r1,#0x7d
;;;203    {
;;;204    	TIMER_Delay(TIMER0, 1000*ms);
000002  00c9              LSLS     r1,r1,#3
000004  b510              PUSH     {r4,lr}               ;203
000006  4341              MULS     r1,r0,r1
000008  4801              LDR      r0,|L17.16|
00000a  f7fffffe          BL       TIMER_Delay
;;;205    }
00000e  bd10              POP      {r4,pc}
;;;206    
                          ENDP

                  |L17.16|
                          DCD      0x40010000

                          AREA ||i.dump_buffer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  dump_buffer PROC
;;;158    
;;;159    void dump_buffer(uint8_t *pucBuff, int nBytes)
000000  b5f8              PUSH     {r3-r7,lr}
;;;160    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;161        uint16_t i = 0;
000006  2400              MOVS     r4,#0
;;;162        
;;;163        printf("dump_buffer : %2d\r\n" , nBytes);    
000008  a00b              ADR      r0,|L18.56|
00000a  f7fffffe          BL       __2printf
;;;164        for (i = 0 ; i < nBytes ; i++)
;;;165        {
;;;166            printf("0x%2X," , pucBuff[i]);
;;;167            if ((i+1)%8 ==0)
00000e  2701              MOVS     r7,#1
000010  077f              LSLS     r7,r7,#29
000012  e00b              B        |L18.44|
                  |L18.20|
000014  5d31              LDRB     r1,[r6,r4]            ;166
000016  a00d              ADR      r0,|L18.76|
000018  f7fffffe          BL       __2printf
00001c  0760              LSLS     r0,r4,#29
00001e  42f8              CMN      r0,r7
000020  d102              BNE      |L18.40|
;;;168            {
;;;169                printf("\r\n");
000022  a00c              ADR      r0,|L18.84|
000024  f7fffffe          BL       __2printf
                  |L18.40|
000028  1c64              ADDS     r4,r4,#1
00002a  b2a4              UXTH     r4,r4                 ;164
                  |L18.44|
00002c  42ac              CMP      r4,r5                 ;164
00002e  dbf1              BLT      |L18.20|
;;;170            }            
;;;171        }
;;;172        printf("\r\n\r\n");
000030  a009              ADR      r0,|L18.88|
000032  f7fffffe          BL       __2printf
;;;173    }
000036  bdf8              POP      {r3-r7,pc}
;;;174    
                          ENDP

                  |L18.56|
000038  64756d70          DCB      "dump_buffer : %2d\r\n",0
00003c  5f627566
000040  66657220
000044  3a202532
000048  640d0a00
                  |L18.76|
00004c  30782532          DCB      "0x%2X,",0
000050  582c00  
000053  00                DCB      0
                  |L18.84|
000054  0d0a00            DCB      "\r\n",0
000057  00                DCB      0
                  |L18.88|
000058  0d0a0d0a          DCB      "\r\n\r\n",0
00005c  00      
00005d  00                DCB      0
00005e  00                DCB      0
00005f  00                DCB      0

                          AREA ||i.dump_buffer_hex||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                  dump_buffer_hex PROC
;;;174    
;;;175    void dump_buffer_hex(uint8_t *pucBuff, int nBytes)
000000  b5f8              PUSH     {r3-r7,lr}
;;;176    {
000002  460e              MOV      r6,r1
000004  4607              MOV      r7,r0
;;;177        int     nIdx, i;
;;;178    
;;;179        nIdx = 0;
000006  2500              MOVS     r5,#0
000008  e025              B        |L19.86|
                  |L19.10|
;;;180        while (nBytes > 0)
;;;181        {
;;;182            printf("0x%04X  ", nIdx);
00000a  4629              MOV      r1,r5
00000c  a015              ADR      r0,|L19.100|
00000e  f7fffffe          BL       __2printf
;;;183            for (i = 0; i < 16; i++)
000012  2400              MOVS     r4,#0
                  |L19.20|
;;;184                printf("%02X ", pucBuff[nIdx + i]);
000014  1928              ADDS     r0,r5,r4
000016  5c39              LDRB     r1,[r7,r0]
000018  a015              ADR      r0,|L19.112|
00001a  f7fffffe          BL       __2printf
00001e  1c64              ADDS     r4,r4,#1
000020  2c10              CMP      r4,#0x10              ;183
000022  dbf7              BLT      |L19.20|
;;;185            printf("  ");
000024  a014              ADR      r0,|L19.120|
000026  f7fffffe          BL       __2printf
;;;186            for (i = 0; i < 16; i++)
00002a  2400              MOVS     r4,#0
                  |L19.44|
;;;187            {
;;;188                if ((pucBuff[nIdx + i] >= 0x20) && (pucBuff[nIdx + i] < 127))
00002c  1928              ADDS     r0,r5,r4
00002e  5c39              LDRB     r1,[r7,r0]
000030  4608              MOV      r0,r1
000032  3820              SUBS     r0,r0,#0x20
000034  285f              CMP      r0,#0x5f
000036  d203              BCS      |L19.64|
;;;189                    printf("%c", pucBuff[nIdx + i]);
000038  a010              ADR      r0,|L19.124|
00003a  f7fffffe          BL       __2printf
00003e  e002              B        |L19.70|
                  |L19.64|
;;;190                else
;;;191                    printf(".");
000040  a00f              ADR      r0,|L19.128|
000042  f7fffffe          BL       __2printf
                  |L19.70|
000046  1c64              ADDS     r4,r4,#1
000048  1e76              SUBS     r6,r6,#1
00004a  2c10              CMP      r4,#0x10              ;186
00004c  dbee              BLT      |L19.44|
;;;192                nBytes--;
;;;193            }
;;;194            nIdx += 16;
;;;195            printf("\n");
00004e  a00d              ADR      r0,|L19.132|
000050  3510              ADDS     r5,r5,#0x10
000052  f7fffffe          BL       __2printf
                  |L19.86|
000056  2e00              CMP      r6,#0                 ;180
000058  dcd7              BGT      |L19.10|
;;;196        }
;;;197        printf("\n");
00005a  a00a              ADR      r0,|L19.132|
00005c  f7fffffe          BL       __2printf
;;;198    }
000060  bdf8              POP      {r3-r7,pc}
;;;199    
                          ENDP

000062  0000              DCW      0x0000
                  |L19.100|
000064  30782530          DCB      "0x%04X  ",0
000068  34582020
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0
                  |L19.112|
000070  25303258          DCB      "%02X ",0
000074  2000    
000076  00                DCB      0
000077  00                DCB      0
                  |L19.120|
000078  202000            DCB      "  ",0
00007b  00                DCB      0
                  |L19.124|
00007c  256300            DCB      "%c",0
00007f  00                DCB      0
                  |L19.128|
000080  2e00              DCB      ".",0
000082  00                DCB      0
000083  00                DCB      0
                  |L19.132|
000084  0a00              DCB      "\n",0
000086  00                DCB      0
000087  00                DCB      0

                          AREA ||i.enable_sys_tick||, CODE, READONLY, ALIGN=2

                  enable_sys_tick PROC
;;;509    
;;;510    void enable_sys_tick(int ticks_per_second)
000000  b510              PUSH     {r4,lr}
000002  4b12              LDR      r3,|L20.76|
;;;511    {
;;;512        set_systick(0);
000004  2200              MOVS     r2,#0
000006  609a              STR      r2,[r3,#8]  ; counter_systick
;;;513        if (SysTick_Config(SystemCoreClock / ticks_per_second))
000008  4601              MOV      r1,r0
00000a  4811              LDR      r0,|L20.80|
00000c  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000e  f7fffffe          BL       __aeabi_uidivmod
000012  4910              LDR      r1,|L20.84|
000014  4288              CMP      r0,r1
000016  d901              BLS      |L20.28|
000018  2001              MOVS     r0,#1
00001a  e010              B        |L20.62|
                  |L20.28|
00001c  0201              LSLS     r1,r0,#8
00001e  0a09              LSRS     r1,r1,#8
000020  480d              LDR      r0,|L20.88|
000022  1e49              SUBS     r1,r1,#1
000024  6141              STR      r1,[r0,#0x14]
000026  490d              LDR      r1,|L20.92|
000028  2207              MOVS     r2,#7
00002a  69cb              LDR      r3,[r1,#0x1c]
00002c  021b              LSLS     r3,r3,#8
00002e  0a1b              LSRS     r3,r3,#8
000030  0444              LSLS     r4,r0,#17
000032  4323              ORRS     r3,r3,r4
000034  61cb              STR      r3,[r1,#0x1c]
000036  2100              MOVS     r1,#0
000038  6181              STR      r1,[r0,#0x18]
00003a  6102              STR      r2,[r0,#0x10]
00003c  4608              MOV      r0,r1
                  |L20.62|
00003e  2800              CMP      r0,#0
000040  d003              BEQ      |L20.74|
;;;514        {
;;;515            /* Setup SysTick Timer for 1 second interrupts  */
;;;516            printf("Set system tick error!!\n");
000042  a007              ADR      r0,|L20.96|
000044  f7fffffe          BL       __2printf
                  |L20.72|
;;;517            while (1);
000048  e7fe              B        |L20.72|
                  |L20.74|
;;;518        }
;;;519    
;;;520        #if defined (ENABLE_TICK_EVENT)
;;;521        TickInitTickEvent();
;;;522        #endif
;;;523    }
00004a  bd10              POP      {r4,pc}
;;;524    
                          ENDP

                  |L20.76|
                          DCD      ||.data||
                  |L20.80|
                          DCD      SystemCoreClock
                  |L20.84|
                          DCD      0x00ffffff
                  |L20.88|
                          DCD      0xe000e000
                  |L20.92|
                          DCD      0xe000ed04
                  |L20.96|
000060  53657420          DCB      "Set system tick error!!\n",0
000064  73797374
000068  656d2074
00006c  69636b20
000070  6572726f
000074  7221210a
000078  00      
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0

                          AREA ||i.get_systick||, CODE, READONLY, ALIGN=2

                  get_systick PROC
;;;78     
;;;79     uint32_t get_systick(void)
000000  4801              LDR      r0,|L21.8|
;;;80     {
;;;81     	return (counter_systick);
000002  6880              LDR      r0,[r0,#8]  ; counter_systick
;;;82     }
000004  4770              BX       lr
;;;83     
                          ENDP

000006  0000              DCW      0x0000
                  |L21.8|
                          DCD      ||.data||

                          AREA ||i.get_tick||, CODE, READONLY, ALIGN=2

                  get_tick PROC
;;;93     
;;;94     uint32_t get_tick(void)
000000  4801              LDR      r0,|L22.8|
;;;95     {
;;;96     	return (counter_tick);
000002  6840              LDR      r0,[r0,#4]  ; counter_tick
;;;97     }
000004  4770              BX       lr
;;;98     
                          ENDP

000006  0000              DCW      0x0000
                  |L22.8|
                          DCD      ||.data||

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  main PROC
;;;645    
;;;646    int main()
000000  b51f              PUSH     {r0-r4,lr}
;;;647    {
;;;648        uint32_t lcmd;
;;;649        uint32_t fw_addr = 0;
;;;650        uint8_t i = 0;    
000002  2400              MOVS     r4,#0
;;;651        uint8_t buffer[16] = {0};
000004  4625              MOV      r5,r4
000006  9400              STR      r4,[sp,#0]
000008  9401              STR      r4,[sp,#4]
00000a  9402              STR      r4,[sp,#8]
;;;652    
;;;653        /* Unlock protected registers */
;;;654        SYS_UnlockReg();
00000c  9403              STR      r4,[sp,#0xc]
00000e  f7fffffe          BL       SYS_UnlockReg
;;;655    
;;;656        /* Init System, peripheral clock and multi-function I/O */
;;;657        SYS_Init();
000012  f7fffffe          BL       SYS_Init
;;;658        /* Init UART to 115200-8n1 */
;;;659    
;;;660    	DEBUG_UART_Init();
000016  f7fffffe          BL       DEBUG_UART_Init
;;;661        UART_Init();//ISP_UART_Init();
00001a  f7fffffe          BL       UART_Init
;;;662    	TIMER1_Init();
00001e  f7fffffe          BL       TIMER1_Init
;;;663        
;;;664        /* Enable FMC ISP */
;;;665        CLK->AHBCLK |= CLK_AHBCLK_ISP_EN_Msk;
000022  4835              LDR      r0,|L23.248|
000024  6841              LDR      r1,[r0,#4]
000026  2204              MOVS     r2,#4
000028  4311              ORRS     r1,r1,r2
00002a  6041              STR      r1,[r0,#4]
;;;666        // Enable FMC and APROM update
;;;667        //
;;;668        FMC_Open();
00002c  f7fffffe          BL       FMC_Open
;;;669        FMC_ENABLE_AP_UPDATE();
000030  4832              LDR      r0,|L23.252|
000032  6801              LDR      r1,[r0,#0]
000034  2208              MOVS     r2,#8
000036  4311              ORRS     r1,r1,r2
000038  6001              STR      r1,[r0,#0]
;;;670        
;;;671        //
;;;672        // Get APROM and data flash information
;;;673        //
;;;674        g_apromSize = APROM_APPLICATION_SIZE;
00003a  200d              MOVS     r0,#0xd
00003c  4930              LDR      r1,|L23.256|
00003e  0300              LSLS     r0,r0,#12
;;;675        GetDataFlashInfo(&g_dataFlashAddr, &g_dataFlashSize);
000040  6008              STR      r0,[r1,#0]  ; g_apromSize
000042  4930              LDR      r1,|L23.260|
000044  4830              LDR      r0,|L23.264|
000046  f7fffffe          BL       GetDataFlashInfo
;;;676        // LDROM_DEBUG("g_apromSize=0x%8X,g_dataFlashAddr=0x%8X(0x%8X)\r\n",g_apromSize,g_dataFlashAddr,g_dataFlashSize);
;;;677        //
;;;678        // Stay in BOOTLOADER or jump to APPLICATION
;;;679        //
;;;680        if (!check_reset_source()) 
00004a  f7fffffe          BL       check_reset_source
00004e  2800              CMP      r0,#0
000050  d018              BEQ      |L23.132|
;;;681    	{
;;;682            if (verify_application_chksum()) 
;;;683    		{
;;;684                goto exit;
;;;685            } 
;;;686    		else 
;;;687    		{
;;;688                LDROM_DEBUG("Stay in BOOTLOADER (checksum invaild)\r\n");
;;;689            }
;;;690        } 
;;;691    	else 
;;;692        {
;;;693            LDROM_DEBUG("Stay in BOOTLOADER (from APPLICATION)\r\n");
000052  a02e              ADR      r0,|L23.268|
000054  f7fffffe          BL       __2printf
;;;694            
;;;695            //
;;;696            // start timer
;;;697            //
;;;698            LDROM_DEBUG("Time-out counter start....\r\n");
000058  a03b              ADR      r0,|L23.328|
00005a  f7fffffe          BL       __2printf
00005e  4946              LDR      r1,|L23.376|
000060  6808              LDR      r0,[r1,#0]
000062  064a              LSLS     r2,r1,#25
000064  4310              ORRS     r0,r0,r2
000066  6008              STR      r0,[r1,#0]
                  |L23.104|
;;;699            TIMER_Start(TIMER1);
;;;700        }
;;;701    
;;;702        SYS_UnlockReg();
000068  f7fffffe          BL       SYS_UnlockReg
;;;703        FMC_Open();    
00006c  f7fffffe          BL       FMC_Open
;;;704        while(1)
;;;705        {
;;;706            if ((bufhead >= 4) || (bUartDataReady == TRUE))
;;;707            {
;;;708                // uint32_t lcmd;
;;;709                lcmd = inpw(uart_rcvbuf);
000070  4e42              LDR      r6,|L23.380|
000072  4c43              LDR      r4,|L23.384|
000074  4f43              LDR      r7,|L23.388|
                  |L23.118|
000076  7820              LDRB     r0,[r4,#0]            ;706  ; bufhead
000078  2804              CMP      r0,#4                 ;706
00007a  d221              BCS      |L23.192|
00007c  7838              LDRB     r0,[r7,#0]            ;706  ; bUartDataReady
00007e  2801              CMP      r0,#1                 ;706
000080  d01e              BEQ      |L23.192|
000082  e022              B        |L23.202|
                  |L23.132|
000084  f7fffffe          BL       verify_application_chksum
000088  2800              CMP      r0,#0                 ;682
00008a  d015              BEQ      |L23.184|
;;;710    
;;;711                if (lcmd == CMD_CONNECT)
;;;712                {
;;;713                    goto _ISP;
;;;714                }
;;;715                else
;;;716                {
;;;717                    bUartDataReady = FALSE;
;;;718                    bufhead = 0;
;;;719                }
;;;720            }
;;;721    
;;;722            if (timeout_cnt > TIMEOUT_INTERVAL) {
;;;723                LDROM_DEBUG("Time-out, perform RESET\r\n");
;;;724                // while(!UART_IS_TX_EMPTY(DEBUG_UART_PORT));
;;;725            
;;;726                // // Reset chip to enter bootloader
;;;727                // SYS_UnlockReg();
;;;728                // SYS_ResetChip();
;;;729                
;;;730                IAPSystemReboot_RST(RST_ADDR_LDROM,RST_SEL_CHIP);
;;;731            }
;;;732    
;;;733        }
;;;734    
;;;735    _ISP:
;;;736    
;;;737        while (1)
;;;738        {
;;;739            if (bUartDataReady == TRUE)
;;;740            {         
;;;741                bUartDataReady = FALSE;
;;;742                ParseCmd(uart_rcvbuf, 64);
;;;743                PutString();
;;;744            }
;;;745        }
;;;746    
;;;747    
;;;748    exit:
;;;749        fw_addr = APROM_FW_VER_ADDR;
00008c  2019              MOVS     r0,#0x19
00008e  0240              LSLS     r0,r0,#9
000090  4669              MOV      r1,sp                 ;651
                  |L23.146|
;;;750        for (i = 0 ; i <16 ; i++)
;;;751        {
;;;752            buffer[i] = *(__IO uint8_t *)fw_addr;
000092  7802              LDRB     r2,[r0,#0]
000094  550a              STRB     r2,[r1,r4]
000096  1c64              ADDS     r4,r4,#1
000098  b2e4              UXTB     r4,r4                 ;750
00009a  1c40              ADDS     r0,r0,#1              ;750
00009c  2c10              CMP      r4,#0x10              ;750
00009e  d3f8              BCC      |L23.146|
;;;753            fw_addr++;
;;;754        }
;;;755        LDROM_DEBUG("Jump to <APPLICATION>,%s\r\n",buffer);
0000a0  a039              ADR      r0,|L23.392|
0000a2  f7fffffe          BL       __2printf
;;;756        while(!UART_IS_TX_EMPTY(DEBUG_UART_PORT));
0000a6  4844              LDR      r0,|L23.440|
                  |L23.168|
0000a8  6981              LDR      r1,[r0,#0x18]
0000aa  00c9              LSLS     r1,r1,#3
0000ac  d5fc              BPL      |L23.168|
;;;757        
;;;758        #if 1
;;;759        IAPSystemReboot_RST(RST_ADDR_APROM,RST_SEL_CPU);
0000ae  2101              MOVS     r1,#1
0000b0  4608              MOV      r0,r1
0000b2  f7fffffe          BL       IAPSystemReboot_RST
                  |L23.182|
;;;760    
;;;761        #else
;;;762        /* Reset system and boot from APROM */
;;;763        SYS->RSTSRC = (SYS_RSTSRC_RSTS_POR_Msk | SYS_RSTSRC_RSTS_RESET_Msk); /* Clear reset status flag */
;;;764        FMC->ISPCON = FMC->ISPCON & 0xFFFFFFFC;
;;;765        SCB->AIRCR = (V6M_AIRCR_VECTKEY_DATA | V6M_AIRCR_SYSRESETREQ);
;;;766        #endif
;;;767        
;;;768        /* Trap the CPU */
;;;769        while (1);   
0000b6  e7fe              B        |L23.182|
                  |L23.184|
0000b8  a040              ADR      r0,|L23.444|
0000ba  f7fffffe          BL       __2printf
0000be  e7d3              B        |L23.104|
                  |L23.192|
0000c0  6830              LDR      r0,[r6,#0]            ;709  ; uart_rcvbuf
0000c2  28ae              CMP      r0,#0xae              ;711
0000c4  d00d              BEQ      |L23.226|
0000c6  703d              STRB     r5,[r7,#0]            ;717
0000c8  7025              STRB     r5,[r4,#0]            ;718
                  |L23.202|
0000ca  484b              LDR      r0,|L23.504|
0000cc  68c0              LDR      r0,[r0,#0xc]          ;722  ; timeout_cnt
0000ce  2805              CMP      r0,#5                 ;722
0000d0  d9d1              BLS      |L23.118|
0000d2  a04a              ADR      r0,|L23.508|
0000d4  f7fffffe          BL       __2printf
0000d8  2102              MOVS     r1,#2                 ;730
0000da  2000              MOVS     r0,#0                 ;730
0000dc  f7fffffe          BL       IAPSystemReboot_RST
0000e0  e7c9              B        |L23.118|
                  |L23.226|
0000e2  7838              LDRB     r0,[r7,#0]            ;739  ; bUartDataReady
0000e4  2801              CMP      r0,#1                 ;739
0000e6  d1fc              BNE      |L23.226|
0000e8  703d              STRB     r5,[r7,#0]            ;741
0000ea  2140              MOVS     r1,#0x40              ;742
0000ec  4823              LDR      r0,|L23.380|
0000ee  f7fffffe          BL       ParseCmd
0000f2  f7fffffe          BL       PutString
0000f6  e7f4              B        |L23.226|
;;;770    
;;;771    	
;;;772    }
;;;773    
                          ENDP

                  |L23.248|
                          DCD      0x50000200
                  |L23.252|
                          DCD      0x5000c000
                  |L23.256|
                          DCD      g_apromSize
                  |L23.260|
                          DCD      g_dataFlashSize
                  |L23.264|
                          DCD      g_dataFlashAddr
                  |L23.268|
00010c  1b5b313b          DCB      27,"[1;36m[LDROM]Stay in BOOTLOADER (from APPLICATION)\r"
000110  33366d5b
000114  4c44524f
000118  4d5d5374
00011c  61792069
000120  6e20424f
000124  4f544c4f
000128  41444552
00012c  20286672
000130  6f6d2041
000134  50504c49
000138  43415449
00013c  4f4e290d
000140  0a1b5b30          DCB      "\n",27,"[0m",0
000144  6d00    
000146  00                DCB      0
000147  00                DCB      0
                  |L23.328|
000148  1b5b313b          DCB      27,"[1;36m[LDROM]Time-out counter start....\r\n",27,"[0m"
00014c  33366d5b
000150  4c44524f
000154  4d5d5469
000158  6d652d6f
00015c  75742063
000160  6f756e74
000164  65722073
000168  74617274
00016c  2e2e2e2e
000170  0d0a1b5b
000174  306d    
000176  00                DCB      0
000177  00                DCB      0
                  |L23.376|
                          DCD      0x40010020
                  |L23.380|
                          DCD      uart_rcvbuf
                  |L23.384|
                          DCD      bufhead
                  |L23.388|
                          DCD      bUartDataReady
                  |L23.392|
000188  1b5b313b          DCB      27,"[1;36m[LDROM]Jump to <APPLICATION>,%s\r\n",27,"[0m",0
00018c  33366d5b
000190  4c44524f
000194  4d5d4a75
000198  6d702074
00019c  6f203c41
0001a0  50504c49
0001a4  43415449
0001a8  4f4e3e2c
0001ac  25730d0a
0001b0  1b5b306d
0001b4  00      
0001b5  00                DCB      0
0001b6  00                DCB      0
0001b7  00                DCB      0
                  |L23.440|
                          DCD      0x40150000
                  |L23.444|
0001bc  1b5b313b          DCB      27,"[1;36m[LDROM]Stay in BOOTLOADER (checksum invaild)\r"
0001c0  33366d5b
0001c4  4c44524f
0001c8  4d5d5374
0001cc  61792069
0001d0  6e20424f
0001d4  4f544c4f
0001d8  41444552
0001dc  20286368
0001e0  65636b73
0001e4  756d2069
0001e8  6e766169
0001ec  6c64290d
0001f0  0a1b5b30          DCB      "\n",27,"[0m",0
0001f4  6d00    
0001f6  00                DCB      0
0001f7  00                DCB      0
                  |L23.504|
                          DCD      ||.data||
                  |L23.508|
0001fc  1b5b313b          DCB      27,"[1;36m[LDROM]Time-out, perform RESET\r\n",27,"[0m",0
000200  33366d5b
000204  4c44524f
000208  4d5d5469
00020c  6d652d6f
000210  75742c20
000214  70657266
000218  6f726d20
00021c  52455345
000220  540d0a1b
000224  5b306d00

                          AREA ||i.reset_buffer||, CODE, READONLY, ALIGN=1

                  reset_buffer PROC
;;;124    
;;;125    void reset_buffer(void *dest, unsigned int val, unsigned int size)
000000  b2c9              UXTB     r1,r1
;;;126    {
000002  e001              B        |L24.8|
                  |L24.4|
;;;127        uint8_t *pu8Dest;
;;;128    //    unsigned int i;
;;;129        
;;;130        pu8Dest = (uint8_t *)dest;
;;;131    
;;;132    	#if 1
;;;133    	while (size-- > 0)
;;;134    		*pu8Dest++ = val;
000004  7001              STRB     r1,[r0,#0]
000006  1c40              ADDS     r0,r0,#1
                  |L24.8|
000008  1e52              SUBS     r2,r2,#1
00000a  d2fb              BCS      |L24.4|
;;;135    	#else
;;;136    	memset(pu8Dest, val, size * (sizeof(pu8Dest[0]) ));
;;;137    	#endif
;;;138    	
;;;139    }
00000c  4770              BX       lr
;;;140    
                          ENDP


                          AREA ||i.set_systick||, CODE, READONLY, ALIGN=2

                  set_systick PROC
;;;83     
;;;84     void set_systick(uint32_t t)
000000  4901              LDR      r1,|L25.8|
;;;85     {
;;;86     	counter_systick = t;
000002  6088              STR      r0,[r1,#8]  ; counter_systick
;;;87     }
000004  4770              BX       lr
;;;88     
                          ENDP

000006  0000              DCW      0x0000
                  |L25.8|
                          DCD      ||.data||

                          AREA ||i.set_tick||, CODE, READONLY, ALIGN=2

                  set_tick PROC
;;;98     
;;;99     void set_tick(uint32_t t)
000000  4901              LDR      r1,|L26.8|
;;;100    {
;;;101    	counter_tick = t;
000002  6048              STR      r0,[r1,#4]  ; counter_tick
;;;102    }
000004  4770              BX       lr
;;;103    
                          ENDP

000006  0000              DCW      0x0000
                  |L26.8|
                          DCD      ||.data||

                          AREA ||i.systick_counter||, CODE, READONLY, ALIGN=2

                  systick_counter PROC
;;;73     
;;;74     void systick_counter(void)
000000  4802              LDR      r0,|L27.12|
;;;75     {
;;;76     	counter_systick++;
000002  6881              LDR      r1,[r0,#8]  ; counter_systick
000004  1c49              ADDS     r1,r1,#1
000006  6081              STR      r1,[r0,#8]  ; counter_systick
;;;77     }
000008  4770              BX       lr
;;;78     
                          ENDP

00000a  0000              DCW      0x0000
                  |L27.12|
                          DCD      ||.data||

                          AREA ||i.tick_counter||, CODE, READONLY, ALIGN=2

                  tick_counter PROC
;;;88     
;;;89     void tick_counter(void)
000000  4802              LDR      r0,|L28.12|
;;;90     {
;;;91     	counter_tick++;
000002  6841              LDR      r1,[r0,#4]  ; counter_tick
000004  1c49              ADDS     r1,r1,#1
000006  6041              STR      r1,[r0,#4]  ; counter_tick
;;;92     }
000008  4770              BX       lr
;;;93     
                          ENDP

00000a  0000              DCW      0x0000
                  |L28.12|
                          DCD      ||.data||

                          AREA ||i.verify_application_chksum||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  verify_application_chksum PROC
;;;366    
;;;367    uint8_t verify_application_chksum(void)
000000  b570              PUSH     {r4-r6,lr}
;;;368    {
;;;369        uint32_t chksum_cal, chksum_app;
;;;370        
;;;371        LDROM_DEBUG("Verify Checksum\r\n");
000002  a012              ADR      r0,|L29.76|
000004  f7fffffe          BL       __2printf
;;;372        
;;;373        chksum_cal = caculate_crc32_checksum(APROM_APPLICATION_START, (g_apromSize - 4));//(g_apromSize - FMC_FLASH_PAGE_SIZE)
000008  4c19              LDR      r4,|L29.112|
00000a  2003              MOVS     r0,#3
00000c  6821              LDR      r1,[r4,#0]  ; g_apromSize
00000e  0300              LSLS     r0,r0,#12
000010  1f09              SUBS     r1,r1,#4
000012  f7fffffe          BL       caculate_crc32_checksum
000016  4605              MOV      r5,r0
;;;374        LDROM_DEBUG("Caculated .....<0x%08X>\r\n", chksum_cal);
000018  4601              MOV      r1,r0
00001a  a016              ADR      r0,|L29.116|
00001c  f7fffffe          BL       __2printf
;;;375        
;;;376        // chksum_app = FMC_Read(g_apromSize - 4);  
;;;377        chksum_app = FMC_Read(APROM_APPLICATION_START + g_apromSize - 4);  // address shift      
000020  491f              LDR      r1,|L29.160|
000022  6820              LDR      r0,[r4,#0]  ; g_apromSize
000024  1840              ADDS     r0,r0,r1
000026  f7fffffe          BL       FMC_Read
00002a  4604              MOV      r4,r0
;;;378        LDROM_DEBUG("In APROM ......<0x%08X>\r\n", chksum_app);
00002c  4601              MOV      r1,r0
00002e  a01d              ADR      r0,|L29.164|
000030  f7fffffe          BL       __2printf
;;;379        
;;;380        if (chksum_cal == chksum_app) {
000034  42a5              CMP      r5,r4
000036  d104              BNE      |L29.66|
;;;381            LDROM_DEBUG("Verify ........<PASS>\r\n");
000038  a025              ADR      r0,|L29.208|
00003a  f7fffffe          BL       __2printf
;;;382            return TRUE;
00003e  2001              MOVS     r0,#1
;;;383        } else {
;;;384            LDROM_DEBUG("Verify ........<FAIL>\r\n");
;;;385            return FALSE;
;;;386        }
;;;387    }
000040  bd70              POP      {r4-r6,pc}
                  |L29.66|
000042  a02e              ADR      r0,|L29.252|
000044  f7fffffe          BL       __2printf
000048  2000              MOVS     r0,#0                 ;385
00004a  bd70              POP      {r4-r6,pc}
;;;388    
                          ENDP

                  |L29.76|
00004c  1b5b313b          DCB      27,"[1;36m[LDROM]Verify Checksum\r\n",27,"[0m",0
000050  33366d5b
000054  4c44524f
000058  4d5d5665
00005c  72696679
000060  20436865
000064  636b7375
000068  6d0d0a1b
00006c  5b306d00
                  |L29.112|
                          DCD      g_apromSize
                  |L29.116|
000074  1b5b313b          DCB      27,"[1;36m[LDROM]Caculated .....<0x%08X>\r\n",27,"[0m",0
000078  33366d5b
00007c  4c44524f
000080  4d5d4361
000084  63756c61
000088  74656420
00008c  2e2e2e2e
000090  2e3c3078
000094  25303858
000098  3e0d0a1b
00009c  5b306d00
                  |L29.160|
                          DCD      0x00002ffc
                  |L29.164|
0000a4  1b5b313b          DCB      27,"[1;36m[LDROM]In APROM ......<0x%08X>\r\n",27,"[0m",0
0000a8  33366d5b
0000ac  4c44524f
0000b0  4d5d496e
0000b4  20415052
0000b8  4f4d202e
0000bc  2e2e2e2e
0000c0  2e3c3078
0000c4  25303858
0000c8  3e0d0a1b
0000cc  5b306d00
                  |L29.208|
0000d0  1b5b313b          DCB      27,"[1;36m[LDROM]Verify ........<PASS>\r\n",27,"[0m",0
0000d4  33366d5b
0000d8  4c44524f
0000dc  4d5d5665
0000e0  72696679
0000e4  202e2e2e
0000e8  2e2e2e2e
0000ec  2e3c5041
0000f0  53533e0d
0000f4  0a1b5b30
0000f8  6d00    
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L29.252|
0000fc  1b5b313b          DCB      27,"[1;36m[LDROM]Verify ........<FAIL>\r\n",27,"[0m",0
000100  33366d5b
000104  4c44524f
000108  4d5d5665
00010c  72696679
000110  202e2e2e
000114  2e2e2e2e
000118  2e3c4641
00011c  494c3e0d
000120  0a1b5b30
000124  6d00    
000126  00                DCB      0
000127  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  table
                          %        1024

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  636f6d70          DCB      0x63,0x6f,0x6d,0x70
000004  6172655f          DCB      0x61,0x72,0x65,0x5f
000008  62756666          DCB      0x62,0x75,0x66,0x66
00000c  657200            DCB      0x65,0x72,0x00
                  |symbol_number.92|
00000f  53                DCB      0x53
000010  79735469          DCB      0x79,0x73,0x54,0x69
000014  636b5f48          DCB      0x63,0x6b,0x5f,0x48
000018  616e646c          DCB      0x61,0x6e,0x64,0x6c
00001c  657200            DCB      0x65,0x72,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  BitFlag
                          DCD      0x00000000
                  counter_tick
                          DCD      0x00000000
                  counter_systick
                          DCD      0x00000000
                  timeout_cnt
                          DCD      0x00000000
                  state
                          DCD      0xffffffff
                  LOG
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_BitFlag____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_BitFlag____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_BitFlag____REVSH|
#line 132
|__asm___6_main_c_BitFlag____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
