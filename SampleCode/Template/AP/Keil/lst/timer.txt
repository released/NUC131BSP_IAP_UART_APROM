; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\timer.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\timer.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC131\Include -I..\..\..\..\Library\StdDriver\inc -I..\..\AP -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\timer.crf ..\..\..\..\Library\StdDriver\src\timer.c]
                          THUMB

                          AREA ||i.TIMER_Close||, CODE, READONLY, ALIGN=1

                  TIMER_Close PROC
;;;78       */
;;;79     void TIMER_Close(TIMER_T *timer)
000000  2100              MOVS     r1,#0
;;;80     {
;;;81         timer->TCSR = 0;
000002  6001              STR      r1,[r0,#0]
;;;82         timer->TEXCON = 0;
000004  6141              STR      r1,[r0,#0x14]
;;;83     }
000006  4770              BX       lr
;;;84     
                          ENDP


                          AREA ||i.TIMER_Delay||, CODE, READONLY, ALIGN=2

                  TIMER_Delay PROC
;;;96       */
;;;97     void TIMER_Delay(TIMER_T *timer, uint32_t u32Usec)
000000  b5f8              PUSH     {r3-r7,lr}
;;;98     {
000002  460c              MOV      r4,r1
000004  4606              MOV      r6,r0
;;;99         uint32_t u32Clk = TIMER_GetModuleClock(timer);
000006  f7fffffe          BL       TIMER_GetModuleClock
;;;100        uint32_t u32Prescale = 0UL, u32Delay = (SystemCoreClock / u32Clk) + 1UL;
00000a  4601              MOV      r1,r0
00000c  9000              STR      r0,[sp,#0]
00000e  481e              LDR      r0,|L2.136|
000010  2700              MOVS     r7,#0
000012  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000014  f7fffffe          BL       __aeabi_uidivmod
000018  1c45              ADDS     r5,r0,#1
;;;101        uint32_t u32Cmpr, u32NsecPerTick;
;;;102    
;;;103        /* Clear current timer configuration */
;;;104        timer->TCSR = 0UL;
00001a  2000              MOVS     r0,#0
00001c  6030              STR      r0,[r6,#0]
;;;105        timer->TEXCON = 0UL;
00001e  6170              STR      r0,[r6,#0x14]
;;;106    
;;;107        if(u32Clk <= 1000000UL)   /* min delay is 1000 us if timer clock source is <= 1 MHz */
000020  491a              LDR      r1,|L2.140|
000022  9800              LDR      r0,[sp,#0]
000024  4288              CMP      r0,r1
000026  d805              BHI      |L2.52|
;;;108        {
;;;109            if(u32Usec < 1000UL)
000028  207d              MOVS     r0,#0x7d
00002a  00c0              LSLS     r0,r0,#3
00002c  4284              CMP      r4,r0
00002e  d205              BCS      |L2.60|
;;;110            {
;;;111                u32Usec = 1000UL;
000030  4604              MOV      r4,r0
000032  e006              B        |L2.66|
                  |L2.52|
;;;112            }
;;;113            if(u32Usec > 1000000UL)
;;;114            {
;;;115                u32Usec = 1000000UL;
;;;116            }
;;;117        }
;;;118        else
;;;119        {
;;;120            if(u32Usec < 100UL)
000034  2c64              CMP      r4,#0x64
000036  d201              BCS      |L2.60|
;;;121            {
;;;122                u32Usec = 100UL;
000038  2464              MOVS     r4,#0x64
00003a  e002              B        |L2.66|
                  |L2.60|
;;;123            }
;;;124            if(u32Usec > 1000000UL)
00003c  428c              CMP      r4,r1
00003e  d900              BLS      |L2.66|
;;;125            {
;;;126                u32Usec = 1000000UL;
000040  460c              MOV      r4,r1
                  |L2.66|
;;;127            }
;;;128        }
;;;129    
;;;130        if(u32Clk <= 1000000UL)
000042  9800              LDR      r0,[sp,#0]
000044  4288              CMP      r0,r1
000046  d808              BHI      |L2.90|
;;;131        {
;;;132            u32Prescale = 0UL;
;;;133            u32NsecPerTick = 1000000000UL / u32Clk;
000048  4601              MOV      r1,r0
00004a  4811              LDR      r0,|L2.144|
00004c  f7fffffe          BL       __aeabi_uidivmod
000050  4601              MOV      r1,r0
;;;134            u32Cmpr = (u32Usec * 1000UL) / u32NsecPerTick;
000052  207d              MOVS     r0,#0x7d
000054  00c0              LSLS     r0,r0,#3
000056  4360              MULS     r0,r4,r0
000058  e005              B        |L2.102|
                  |L2.90|
;;;135        }
;;;136        else
;;;137        {
;;;138            u32Cmpr = u32Usec * (u32Clk / 1000000UL);
00005a  f7fffffe          BL       __aeabi_uidivmod
00005e  4360              MULS     r0,r4,r0
;;;139            u32Prescale = (u32Cmpr >> 24);  /* for 24 bits CMPDAT */
000060  0e07              LSRS     r7,r0,#24
;;;140            if (u32Prescale > 0UL)
000062  d002              BEQ      |L2.106|
;;;141                u32Cmpr = u32Cmpr / (u32Prescale + 1UL);
000064  1c79              ADDS     r1,r7,#1
                  |L2.102|
000066  f7fffffe          BL       __aeabi_uidivmod
                  |L2.106|
;;;142        }
;;;143    
;;;144        timer->TCMPR = u32Cmpr;
00006a  6070              STR      r0,[r6,#4]
;;;145        timer->TCSR = TIMER_TCSR_CEN_Msk | TIMER_ONESHOT_MODE | u32Prescale;
00006c  2001              MOVS     r0,#1
00006e  0780              LSLS     r0,r0,#30
000070  4307              ORRS     r7,r7,r0
000072  6037              STR      r7,[r6,#0]
;;;146    
;;;147        /*
;;;148            When system clock is faster than timer clock, it is possible timer active bit cannot set in time while we check it.
;;;149            And the while loop below return immediately, so put a tiny delay here allowing timer start counting and raise active flag.
;;;150        */
;;;151        for(; u32Delay > 0UL; u32Delay--)
000074  2d00              CMP      r5,#0
000076  d002              BEQ      |L2.126|
                  |L2.120|
;;;152        {
;;;153            __NOP();
000078  bf00              NOP      
00007a  1e6d              SUBS     r5,r5,#1
00007c  d1fc              BNE      |L2.120|
                  |L2.126|
;;;154        }
;;;155    
;;;156        while(timer->TCSR & TIMER_TCSR_CACT_Msk);
00007e  6830              LDR      r0,[r6,#0]
000080  0180              LSLS     r0,r0,#6
000082  d4fc              BMI      |L2.126|
;;;157    }
000084  bdf8              POP      {r3-r7,pc}
;;;158    
                          ENDP

000086  0000              DCW      0x0000
                  |L2.136|
                          DCD      SystemCoreClock
                  |L2.140|
                          DCD      0x000f4240
                  |L2.144|
                          DCD      0x3b9aca00

                          AREA ||i.TIMER_DisableCapture||, CODE, READONLY, ALIGN=1

                  TIMER_DisableCapture PROC
;;;192      */
;;;193    void TIMER_DisableCapture(TIMER_T *timer)
000000  6941              LDR      r1,[r0,#0x14]
;;;194    {
;;;195        timer->TEXCON &= ~TIMER_TEXCON_TEXEN_Msk;
000002  2208              MOVS     r2,#8
000004  4391              BICS     r1,r1,r2
000006  6141              STR      r1,[r0,#0x14]
;;;196    }
000008  4770              BX       lr
;;;197    
                          ENDP


                          AREA ||i.TIMER_DisableEventCounter||, CODE, READONLY, ALIGN=1

                  TIMER_DisableEventCounter PROC
;;;226      */
;;;227    void TIMER_DisableEventCounter(TIMER_T *timer)
000000  6801              LDR      r1,[r0,#0]
;;;228    {
;;;229        timer->TCSR &= ~TIMER_TCSR_CTB_Msk;
000002  2201              MOVS     r2,#1
000004  0612              LSLS     r2,r2,#24
000006  4391              BICS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;230    }
00000a  4770              BX       lr
;;;231    
                          ENDP


                          AREA ||i.TIMER_EnableCapture||, CODE, READONLY, ALIGN=1

                  TIMER_EnableCapture PROC
;;;176      */
;;;177    void TIMER_EnableCapture(TIMER_T *timer, uint32_t u32CapMode, uint32_t u32Edge)
000000  b510              PUSH     {r4,lr}
;;;178    {
;;;179    
;;;180        timer->TEXCON = (timer->TEXCON & (~(TIMER_TEXCON_RSTCAPSEL_Msk | TIMER_TEXCON_TEX_EDGE_Msk))) |
000002  6943              LDR      r3,[r0,#0x14]
000004  2416              MOVS     r4,#0x16
000006  43a3              BICS     r3,r3,r4
000008  430b              ORRS     r3,r3,r1
00000a  4313              ORRS     r3,r3,r2
00000c  2108              MOVS     r1,#8
00000e  430b              ORRS     r3,r3,r1
000010  6143              STR      r3,[r0,#0x14]
;;;181                        u32CapMode | u32Edge | TIMER_TEXCON_TEXEN_Msk;
;;;182    }
000012  bd10              POP      {r4,pc}
;;;183    
                          ENDP


                          AREA ||i.TIMER_EnableEventCounter||, CODE, READONLY, ALIGN=1

                  TIMER_EnableEventCounter PROC
;;;211      */
;;;212    void TIMER_EnableEventCounter(TIMER_T *timer, uint32_t u32Edge)
000000  6942              LDR      r2,[r0,#0x14]
;;;213    {
;;;214        timer->TEXCON = (timer->TEXCON & (~TIMER_TEXCON_TX_PHASE_Msk)) | u32Edge;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  430a              ORRS     r2,r2,r1
000008  6142              STR      r2,[r0,#0x14]
;;;215        timer->TCSR |= TIMER_TCSR_CTB_Msk;
00000a  6801              LDR      r1,[r0,#0]
00000c  2201              MOVS     r2,#1
00000e  0612              LSLS     r2,r2,#24
000010  4311              ORRS     r1,r1,r2
000012  6001              STR      r1,[r0,#0]
;;;216    }
000014  4770              BX       lr
;;;217    
                          ENDP


                          AREA ||i.TIMER_GetModuleClock||, CODE, READONLY, ALIGN=2

                  TIMER_GetModuleClock PROC
;;;241      */
;;;242    uint32_t TIMER_GetModuleClock(TIMER_T *timer)
000000  b510              PUSH     {r4,lr}
;;;243    {
000002  b088              SUB      sp,sp,#0x20
000004  4604              MOV      r4,r0
;;;244        uint32_t u32Src;
;;;245        const uint32_t au32Clk[] = {__HXT, 0, 0, 0, 0, __LIRC, 0, __HIRC};
000006  2220              MOVS     r2,#0x20
000008  4912              LDR      r1,|L7.84|
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       __aeabi_memcpy4
;;;246    
;;;247        if(timer == TIMER0)
000010  4911              LDR      r1,|L7.88|
;;;248            u32Src = (CLK->CLKSEL1 & CLK_CLKSEL1_TMR0_S_Msk) >> CLK_CLKSEL1_TMR0_S_Pos;
000012  4812              LDR      r0,|L7.92|
000014  428c              CMP      r4,r1                 ;247
000016  d102              BNE      |L7.30|
000018  6940              LDR      r0,[r0,#0x14]
;;;249        else if(timer == TIMER1)
;;;250            u32Src = (CLK->CLKSEL1 & CLK_CLKSEL1_TMR1_S_Msk) >> CLK_CLKSEL1_TMR1_S_Pos;
;;;251        else if(timer == TIMER2)
;;;252            u32Src = (CLK->CLKSEL1 & CLK_CLKSEL1_TMR2_S_Msk) >> CLK_CLKSEL1_TMR2_S_Pos;
;;;253        else  // Timer 3
;;;254            u32Src = (CLK->CLKSEL1 & CLK_CLKSEL1_TMR3_S_Msk) >> CLK_CLKSEL1_TMR3_S_Pos;
;;;255    
;;;256        if(u32Src == 2)
;;;257        {
;;;258            return(SystemCoreClock);
;;;259        }
;;;260    
;;;261        return(au32Clk[u32Src]);
;;;262    }
00001a  0a00              LSRS     r0,r0,#8
00001c  e00d              B        |L7.58|
                  |L7.30|
00001e  490e              LDR      r1,|L7.88|
000020  3120              ADDS     r1,r1,#0x20           ;249
000022  428c              CMP      r4,r1                 ;249
000024  d102              BNE      |L7.44|
000026  6940              LDR      r0,[r0,#0x14]         ;250
000028  0b00              LSRS     r0,r0,#12
00002a  e006              B        |L7.58|
                  |L7.44|
00002c  490c              LDR      r1,|L7.96|
00002e  6940              LDR      r0,[r0,#0x14]         ;254
000030  428c              CMP      r4,r1                 ;251
000032  d101              BNE      |L7.56|
000034  0c00              LSRS     r0,r0,#16
000036  e000              B        |L7.58|
                  |L7.56|
000038  0d00              LSRS     r0,r0,#20
                  |L7.58|
00003a  0740              LSLS     r0,r0,#29
00003c  0f40              LSRS     r0,r0,#29
00003e  2802              CMP      r0,#2                 ;256
000040  d004              BEQ      |L7.76|
000042  0080              LSLS     r0,r0,#2              ;261
000044  4669              MOV      r1,sp                 ;261
000046  5808              LDR      r0,[r1,r0]            ;261
                  |L7.72|
000048  b008              ADD      sp,sp,#0x20
00004a  bd10              POP      {r4,pc}
                  |L7.76|
00004c  4805              LDR      r0,|L7.100|
00004e  6800              LDR      r0,[r0,#0]            ;258  ; SystemCoreClock
000050  e7fa              B        |L7.72|
;;;263    
                          ENDP

000052  0000              DCW      0x0000
                  |L7.84|
                          DCD      ||.constdata||
                  |L7.88|
                          DCD      0x40010000
                  |L7.92|
                          DCD      0x50000200
                  |L7.96|
                          DCD      0x40110000
                  |L7.100|
                          DCD      SystemCoreClock

                          AREA ||i.TIMER_Open||, CODE, READONLY, ALIGN=1

                  TIMER_Open PROC
;;;45       */
;;;46     uint32_t TIMER_Open(TIMER_T *timer, uint32_t u32Mode, uint32_t u32Freq)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;47     {
000002  4617              MOV      r7,r2
000004  4606              MOV      r6,r0
;;;48         uint32_t u32Clk = TIMER_GetModuleClock(timer);
000006  f7fffffe          BL       TIMER_GetModuleClock
00000a  4605              MOV      r5,r0
;;;49         uint32_t u32Cmpr = 0UL, u32Prescale = 0UL;
00000c  2400              MOVS     r4,#0
;;;50     
;;;51         /* Fastest possible timer working freq is (u32Clk / 2). While cmpr = 2, prescaler = 0. */
;;;52         if(u32Freq > (u32Clk / 2UL))
00000e  0840              LSRS     r0,r0,#1
000010  42b8              CMP      r0,r7
000012  d201              BCS      |L8.24|
;;;53         {
;;;54             u32Cmpr = 2UL;
000014  2002              MOVS     r0,#2
000016  e008              B        |L8.42|
                  |L8.24|
;;;55         }
;;;56         else
;;;57         {
;;;58             u32Cmpr = u32Clk / u32Freq;
000018  4639              MOV      r1,r7
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       __aeabi_uidivmod
;;;59             u32Prescale = (u32Cmpr >> 24);  /* for 24 bits CMPDAT */
000020  0e04              LSRS     r4,r0,#24
;;;60             if (u32Prescale > 0UL)
000022  d002              BEQ      |L8.42|
;;;61                 u32Cmpr = u32Cmpr / (u32Prescale + 1UL);
000024  1c61              ADDS     r1,r4,#1
000026  f7fffffe          BL       __aeabi_uidivmod
                  |L8.42|
;;;62         }
;;;63     
;;;64         timer->TCSR = u32Mode | u32Prescale;
00002a  9901              LDR      r1,[sp,#4]
00002c  4321              ORRS     r1,r1,r4
00002e  6031              STR      r1,[r6,#0]
;;;65         timer->TCMPR = u32Cmpr;
000030  6070              STR      r0,[r6,#4]
000032  1c64              ADDS     r4,r4,#1
;;;66     
;;;67         return(u32Clk / (u32Cmpr * (u32Prescale + 1UL)));
000034  4360              MULS     r0,r4,r0
000036  4601              MOV      r1,r0
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       __aeabi_uidivmod
;;;68     }
00003e  bdfe              POP      {r1-r7,pc}
;;;69     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00002710
                          DCD      0x00000000
                          DCD      0x01518000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_5bec749a____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_timer_c_5bec749a____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_5bec749a____REVSH|
#line 132
|__asm___7_timer_c_5bec749a____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
