; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\clk.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\clk.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC131\Include -I..\..\..\..\Library\StdDriver\inc -I..\..\AP -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\clk.crf ..\..\..\..\Library\StdDriver\src\clk.c]
                          THUMB

                          AREA ||i.CLK_DisableCKO||, CODE, READONLY, ALIGN=2

                  CLK_DisableCKO PROC
;;;33       */
;;;34     void CLK_DisableCKO(void)
000000  b500              PUSH     {lr}
;;;35     {
;;;36         /* Disable CKO clock source */
;;;37         CLK_DisableModuleClock(FDIV_MODULE);
000002  4802              LDR      r0,|L1.12|
000004  f7fffffe          BL       CLK_DisableModuleClock
;;;38     }
000008  bd00              POP      {pc}
;;;39     
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      0x66200006

                          AREA ||i.CLK_DisableModuleClock||, CODE, READONLY, ALIGN=2

                  CLK_DisableModuleClock PROC
;;;453      */
;;;454    void CLK_DisableModuleClock(uint32_t u32ModuleIdx)
000000  b51f              PUSH     {r0-r4,lr}
;;;455    {
;;;456        uint32_t u32OffsetTbl[4] = {0x0, 0x4, 0x2C, 0x0};
000002  4909              LDR      r1,|L2.40|
000004  c91e              LDM      r1,{r1-r4}
;;;457    
;;;458        *(volatile uint32_t *)((uint32_t)&CLK->AHBCLK + u32OffsetTbl[MODULE_APBCLK(u32ModuleIdx)])  &= ~(1 << MODULE_IP_EN_Pos(u32ModuleIdx));
000006  9403              STR      r4,[sp,#0xc]
000008  466c              MOV      r4,sp
00000a  c40e              STM      r4!,{r1-r3}
00000c  0f81              LSRS     r1,r0,#30
00000e  008a              LSLS     r2,r1,#2
000010  4669              MOV      r1,sp
000012  588a              LDR      r2,[r1,r2]
000014  4905              LDR      r1,|L2.44|
000016  1851              ADDS     r1,r2,r1
000018  684a              LDR      r2,[r1,#4]
00001a  06c3              LSLS     r3,r0,#27
00001c  0edb              LSRS     r3,r3,#27
00001e  2001              MOVS     r0,#1
000020  4098              LSLS     r0,r0,r3
000022  4382              BICS     r2,r2,r0
000024  604a              STR      r2,[r1,#4]
;;;459    }
000026  bd1f              POP      {r0-r4,pc}
;;;460    
                          ENDP

                  |L2.40|
                          DCD      ||.constdata||+0x20
                  |L2.44|
                          DCD      0x50000200

                          AREA ||i.CLK_DisablePLL||, CODE, READONLY, ALIGN=2

                  CLK_DisablePLL PROC
;;;593      */
;;;594    void CLK_DisablePLL(void)
000000  4802              LDR      r0,|L3.12|
;;;595    {
;;;596        CLK->PLLCON |= CLK_PLLCON_PD_Msk;
000002  6a01              LDR      r1,[r0,#0x20]
000004  01c2              LSLS     r2,r0,#7
000006  4311              ORRS     r1,r1,r2
000008  6201              STR      r1,[r0,#0x20]
;;;597    }
00000a  4770              BX       lr
;;;598    
                          ENDP

                  |L3.12|
                          DCD      0x50000200

                          AREA ||i.CLK_DisableSysTick||, CODE, READONLY, ALIGN=2

                  CLK_DisableSysTick PROC
;;;664      */
;;;665    void CLK_DisableSysTick(void) 
000000  4901              LDR      r1,|L4.8|
;;;666    {    
;;;667        /* Set System Tick counter disabled */
;;;668    	SysTick->CTRL = 0;    
000002  2000              MOVS     r0,#0
000004  6108              STR      r0,[r1,#0x10]
;;;669    }
000006  4770              BX       lr
;;;670    
                          ENDP

                  |L4.8|
                          DCD      0xe000e000

                          AREA ||i.CLK_DisableXtalRC||, CODE, READONLY, ALIGN=2

                  CLK_DisableXtalRC PROC
;;;387      */
;;;388    void CLK_DisableXtalRC(uint32_t u32ClkMask)
000000  4902              LDR      r1,|L5.12|
;;;389    {
;;;390        CLK->PWRCON &= ~u32ClkMask;
000002  680a              LDR      r2,[r1,#0]
000004  4382              BICS     r2,r2,r0
000006  600a              STR      r2,[r1,#0]
;;;391    }
000008  4770              BX       lr
;;;392    
                          ENDP

00000a  0000              DCW      0x0000
                  |L5.12|
                          DCD      0x50000200

                          AREA ||i.CLK_EnableCKO||, CODE, READONLY, ALIGN=2

                  CLK_EnableCKO PROC
;;;56       */
;;;57     void CLK_EnableCKO(uint32_t u32ClkSrc, uint32_t u32ClkDiv, uint32_t u32ClkDivBy1En)
000000  b530              PUSH     {r4,r5,lr}
;;;58     {
000002  4604              MOV      r4,r0
;;;59         /* CKO = clock source / 2^(u32ClkDiv + 1) */
;;;60         CLK->FRQDIV = CLK_FRQDIV_DIVIDER_EN_Msk | u32ClkDiv | (u32ClkDivBy1En << CLK_FRQDIV_DIVIDER1_Pos);
000004  0152              LSLS     r2,r2,#5
000006  430a              ORRS     r2,r2,r1
000008  2010              MOVS     r0,#0x10
00000a  4302              ORRS     r2,r2,r0
00000c  4805              LDR      r0,|L6.36|
00000e  6242              STR      r2,[r0,#0x24]
;;;61     
;;;62         /* Enable CKO clock source */
;;;63         CLK_EnableModuleClock(FDIV_MODULE);
000010  4d05              LDR      r5,|L6.40|
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       CLK_EnableModuleClock
;;;64     
;;;65         /* Select CKO clock source */
;;;66         CLK_SetModuleClock(FDIV_MODULE, u32ClkSrc, 0);
000018  2200              MOVS     r2,#0
00001a  4621              MOV      r1,r4
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       CLK_SetModuleClock
;;;67     }
000022  bd30              POP      {r4,r5,pc}
;;;68     
                          ENDP

                  |L6.36|
                          DCD      0x50000200
                  |L6.40|
                          DCD      0x66200006

                          AREA ||i.CLK_EnableModuleClock||, CODE, READONLY, ALIGN=2

                  CLK_EnableModuleClock PROC
;;;419      */
;;;420    void CLK_EnableModuleClock(uint32_t u32ModuleIdx)
000000  b51f              PUSH     {r0-r4,lr}
;;;421    {
;;;422        uint32_t u32OffsetTbl[4] = {0x0, 0x4, 0x2C, 0x0};
000002  4909              LDR      r1,|L7.40|
000004  c91e              LDM      r1,{r1-r4}
;;;423    
;;;424        *(volatile uint32_t *)((uint32_t)&CLK->AHBCLK + u32OffsetTbl[MODULE_APBCLK(u32ModuleIdx)])  |= 1 << MODULE_IP_EN_Pos(u32ModuleIdx);
000006  9403              STR      r4,[sp,#0xc]
000008  466c              MOV      r4,sp
00000a  c40e              STM      r4!,{r1-r3}
00000c  0f81              LSRS     r1,r0,#30
00000e  008a              LSLS     r2,r1,#2
000010  4669              MOV      r1,sp
000012  588a              LDR      r2,[r1,r2]
000014  4905              LDR      r1,|L7.44|
000016  1851              ADDS     r1,r2,r1
000018  684a              LDR      r2,[r1,#4]
00001a  06c3              LSLS     r3,r0,#27
00001c  0edb              LSRS     r3,r3,#27
00001e  2001              MOVS     r0,#1
000020  4098              LSLS     r0,r0,r3
000022  4302              ORRS     r2,r2,r0
000024  604a              STR      r2,[r1,#4]
;;;425    }
000026  bd1f              POP      {r0-r4,pc}
;;;426    
                          ENDP

                  |L7.40|
                          DCD      ||.constdata||+0x10
                  |L7.44|
                          DCD      0x50000200

                          AREA ||i.CLK_EnablePLL||, CODE, READONLY, ALIGN=2

                  CLK_EnablePLL PROC
;;;471      */
;;;472    uint32_t CLK_EnablePLL(uint32_t u32PllClkSrc, uint32_t u32PllFreq)
000000  b5f0              PUSH     {r4-r7,lr}
;;;473    {
000002  0007              MOVS     r7,r0
000004  460c              MOV      r4,r1
;;;474        uint32_t u32PllSrcClk, u32NR, u32NF, u32NO, u32CLK_SRC;
;;;475        uint32_t u32Tmp, u32Tmp2, u32Tmp3, u32Min, u32MinNF, u32MinNR;
;;;476    
;;;477        /* Disable PLL first to avoid unstable when setting PLL. */
;;;478        CLK->PLLCON = CLK_PLLCON_PD_Msk;
000006  4856              LDR      r0,|L8.352|
000008  b085              SUB      sp,sp,#0x14           ;473
00000a  4954              LDR      r1,|L8.348|
00000c  6201              STR      r1,[r0,#0x20]
;;;479    
;;;480        /* PLL source clock is from HXT */
;;;481        if(u32PllClkSrc == CLK_PLLCON_PLL_SRC_HXT)
;;;482        {
;;;483            /* Enable HXT clock */
;;;484            CLK->PWRCON |= CLK_PWRCON_XTL12M_EN_Msk;
;;;485    
;;;486            /* Wait for HXT clock ready */
;;;487            CLK_WaitClockReady(CLK_CLKSTATUS_XTL12M_STB_Msk);
;;;488    
;;;489            /* Select PLL source clock from HXT */
;;;490            u32CLK_SRC = CLK_PLLCON_PLL_SRC_HXT;
;;;491            u32PllSrcClk = __HXT;
00000e  4e55              LDR      r6,|L8.356|
;;;492    
;;;493            /* u32NR start from 2 */
;;;494            u32NR = 2;
;;;495        }
;;;496    
;;;497        /* PLL source clock is from HIRC */
;;;498        else
;;;499        {
;;;500            /* Enable HIRC clock */
;;;501            CLK->PWRCON |= CLK_PWRCON_OSC22M_EN_Msk;
000010  6801              LDR      r1,[r0,#0]
000012  d013              BEQ      |L8.60|
000014  2204              MOVS     r2,#4
000016  4311              ORRS     r1,r1,r2
000018  6001              STR      r1,[r0,#0]
;;;502    
;;;503            /* Wait for HIRC clock ready */
;;;504            CLK_WaitClockReady(CLK_CLKSTATUS_OSC22M_STB_Msk);
00001a  2010              MOVS     r0,#0x10
00001c  f7fffffe          BL       CLK_WaitClockReady
;;;505    
;;;506            /* Select PLL source clock from HIRC */
;;;507            u32CLK_SRC = CLK_PLLCON_PLL_SRC_HIRC;
000020  2001              MOVS     r0,#1
000022  04c0              LSLS     r0,r0,#19
;;;508            u32PllSrcClk = __HIRC;
000024  9002              STR      r0,[sp,#8]
000026  4850              LDR      r0,|L8.360|
;;;509    
;;;510            /* u32NR start from 4 when FIN = 22.1184MHz to avoid calculation overflow */
;;;511            u32NR = 4;
000028  2504              MOVS     r5,#4
00002a  9003              STR      r0,[sp,#0xc]
                  |L8.44|
;;;512        }
;;;513    
;;;514        /* Select "NO" according to request frequency */
;;;515        if((u32PllFreq <= FREQ_200MHZ) && (u32PllFreq > FREQ_100MHZ))
00002c  484f              LDR      r0,|L8.364|
00002e  4950              LDR      r1,|L8.368|
000030  1820              ADDS     r0,r4,r0
000032  4288              CMP      r0,r1
000034  d80d              BHI      |L8.82|
;;;516        {
;;;517            u32NO = 0;
000036  2000              MOVS     r0,#0
000038  9004              STR      r0,[sp,#0x10]
00003a  e01c              B        |L8.118|
                  |L8.60|
00003c  2201              MOVS     r2,#1                 ;484
00003e  4311              ORRS     r1,r1,r2              ;484
000040  6001              STR      r1,[r0,#0]            ;484
000042  4610              MOV      r0,r2                 ;487
000044  f7fffffe          BL       CLK_WaitClockReady
000048  2000              MOVS     r0,#0                 ;490
00004a  2502              MOVS     r5,#2                 ;494
00004c  9603              STR      r6,[sp,#0xc]          ;494
00004e  9002              STR      r0,[sp,#8]            ;494
000050  e7ec              B        |L8.44|
                  |L8.82|
;;;518        }
;;;519        else if((u32PllFreq <= FREQ_100MHZ) && (u32PllFreq > FREQ_50MHZ))
000052  4848              LDR      r0,|L8.372|
000054  4948              LDR      r1,|L8.376|
000056  1820              ADDS     r0,r4,r0
000058  4288              CMP      r0,r1
00005a  d803              BHI      |L8.100|
;;;520        {
;;;521            u32NO = 1;
00005c  2001              MOVS     r0,#1
;;;522            u32PllFreq = u32PllFreq << 1;
00005e  0064              LSLS     r4,r4,#1
000060  9004              STR      r0,[sp,#0x10]
000062  e008              B        |L8.118|
                  |L8.100|
;;;523        }
;;;524        else if((u32PllFreq <= FREQ_50MHZ) && (u32PllFreq >= FREQ_25MHZ))
000064  4845              LDR      r0,|L8.380|
000066  4945              LDR      r1,|L8.380|
000068  1820              ADDS     r0,r4,r0
00006a  4249              RSBS     r1,r1,#0
00006c  4288              CMP      r0,r1
00006e  d849              BHI      |L8.260|
;;;525        {
;;;526            u32NO = 3;
000070  2003              MOVS     r0,#3
;;;527            u32PllFreq = u32PllFreq << 2;
000072  00a4              LSLS     r4,r4,#2
000074  9004              STR      r0,[sp,#0x10]
                  |L8.118|
;;;528        }
;;;529        else
;;;530        {
;;;531            /* Wrong frequency request. Just return default setting. */
;;;532            goto lexit;
;;;533        }
;;;534    
;;;535        /* Find best solution */
;;;536        u32Min = (uint32_t) - 1;
000076  2600              MOVS     r6,#0
000078  43f6              MVNS     r6,r6
;;;537        u32MinNR = 0;
00007a  2000              MOVS     r0,#0
;;;538        u32MinNF = 0;
00007c  9000              STR      r0,[sp,#0]
;;;539        for(; u32NR <= 33; u32NR++)
00007e  9001              STR      r0,[sp,#4]
000080  e021              B        |L8.198|
                  |L8.130|
;;;540        {
;;;541            u32Tmp = u32PllSrcClk / u32NR;
000082  4629              MOV      r1,r5
000084  9803              LDR      r0,[sp,#0xc]
000086  f7fffffe          BL       __aeabi_uidivmod
;;;542            if((u32Tmp > 1600000) && (u32Tmp < 15000000))
00008a  493d              LDR      r1,|L8.384|
00008c  4a3d              LDR      r2,|L8.388|
00008e  1841              ADDS     r1,r0,r1
000090  4291              CMP      r1,r2
000092  d217              BCS      |L8.196|
;;;543            {
;;;544                for(u32NF = 2; u32NF <= 513; u32NF++)
000094  2202              MOVS     r2,#2
                  |L8.150|
;;;545                {
;;;546                    u32Tmp2 = u32Tmp * u32NF;
;;;547                    if((u32Tmp2 >= 100000000) && (u32Tmp2 <= 200000000))
000096  4b35              LDR      r3,|L8.364|
000098  4601              MOV      r1,r0                 ;544
00009a  4351              MULS     r1,r2,r1              ;546
00009c  1c5b              ADDS     r3,r3,#1
00009e  18cf              ADDS     r7,r1,r3
0000a0  425b              RSBS     r3,r3,#0
0000a2  429f              CMP      r7,r3
0000a4  d80a              BHI      |L8.188|
;;;548                    {
;;;549                        u32Tmp3 = (u32Tmp2 > u32PllFreq) ? u32Tmp2 - u32PllFreq : u32PllFreq - u32Tmp2;
0000a6  42a1              CMP      r1,r4
0000a8  d901              BLS      |L8.174|
0000aa  1b0b              SUBS     r3,r1,r4
0000ac  e000              B        |L8.176|
                  |L8.174|
0000ae  1a63              SUBS     r3,r4,r1
                  |L8.176|
;;;550                        if(u32Tmp3 < u32Min)
0000b0  42b3              CMP      r3,r6
0000b2  d203              BCS      |L8.188|
;;;551                        {
;;;552                            u32Min = u32Tmp3;
0000b4  001e              MOVS     r6,r3
;;;553                            u32MinNR = u32NR;
;;;554                            u32MinNF = u32NF;
;;;555    
;;;556                            /* Break when get good results */
;;;557                            if(u32Min == 0)
0000b6  9500              STR      r5,[sp,#0]
0000b8  9201              STR      r2,[sp,#4]
0000ba  d003              BEQ      |L8.196|
                  |L8.188|
0000bc  4932              LDR      r1,|L8.392|
0000be  1c52              ADDS     r2,r2,#1              ;544
0000c0  428a              CMP      r2,r1                 ;544
0000c2  d9e8              BLS      |L8.150|
                  |L8.196|
0000c4  1c6d              ADDS     r5,r5,#1              ;544
                  |L8.198|
0000c6  2d21              CMP      r5,#0x21              ;539
0000c8  d9db              BLS      |L8.130|
;;;558                                break;
;;;559                        }
;;;560                    }
;;;561                }
;;;562            }
;;;563        }
;;;564    
;;;565        /* Enable and apply new PLL setting. */
;;;566        CLK->PLLCON = u32CLK_SRC | (u32NO << 14) | ((u32MinNR - 2) << 9) | (u32MinNF - 2);
0000ca  9804              LDR      r0,[sp,#0x10]
0000cc  9902              LDR      r1,[sp,#8]
0000ce  0380              LSLS     r0,r0,#14
0000d0  4308              ORRS     r0,r0,r1
0000d2  9900              LDR      r1,[sp,#0]
0000d4  2201              MOVS     r2,#1
0000d6  0249              LSLS     r1,r1,#9
0000d8  0292              LSLS     r2,r2,#10
0000da  1a89              SUBS     r1,r1,r2
0000dc  4308              ORRS     r0,r0,r1
0000de  9901              LDR      r1,[sp,#4]
0000e0  1e89              SUBS     r1,r1,#2
0000e2  4308              ORRS     r0,r0,r1
0000e4  491e              LDR      r1,|L8.352|
0000e6  6208              STR      r0,[r1,#0x20]
;;;567    
;;;568        /* Waiting for PLL clock stable */
;;;569        CLK_WaitClockReady(CLK_CLKSTATUS_PLL_STB_Msk);
0000e8  2004              MOVS     r0,#4
0000ea  f7fffffe          BL       CLK_WaitClockReady
;;;570    
;;;571        /* Return actual PLL output clock frequency */
;;;572        return u32PllSrcClk / ((u32NO + 1) * u32MinNR) * u32MinNF;
0000ee  9904              LDR      r1,[sp,#0x10]
0000f0  9800              LDR      r0,[sp,#0]
0000f2  1c49              ADDS     r1,r1,#1
0000f4  4341              MULS     r1,r0,r1
0000f6  9803              LDR      r0,[sp,#0xc]
0000f8  f7fffffe          BL       __aeabi_uidivmod
0000fc  9901              LDR      r1,[sp,#4]
0000fe  4348              MULS     r0,r1,r0
                  |L8.256|
;;;573    
;;;574    lexit:
;;;575    
;;;576        /* Apply default PLL setting and return */
;;;577        if(u32PllClkSrc == CLK_PLLCON_PLL_SRC_HXT)
;;;578            CLK->PLLCON = 0xC22E; /* 48MHz */
;;;579        else
;;;580            CLK->PLLCON = 0x8D66F; /* 48.06498462MHz */
;;;581    
;;;582        CLK_WaitClockReady(CLK_CLKSTATUS_PLL_STB_Msk);
;;;583        return CLK_GetPLLClockFreq();
;;;584    
;;;585    
;;;586    }
000100  b005              ADD      sp,sp,#0x14
000102  bdf0              POP      {r4-r7,pc}
                  |L8.260|
000104  2f00              CMP      r7,#0                 ;577
000106  d00f              BEQ      |L8.296|
000108  4920              LDR      r1,|L8.396|
                  |L8.266|
00010a  4815              LDR      r0,|L8.352|
00010c  6201              STR      r1,[r0,#0x20]         ;580
00010e  2004              MOVS     r0,#4                 ;582
000110  f7fffffe          BL       CLK_WaitClockReady
000114  a01e              ADR      r0,|L8.400|
000116  6800              LDR      r0,[r0,#0]            ;582
000118  9000              STR      r0,[sp,#0]            ;582
00011a  4811              LDR      r0,|L8.352|
00011c  6a01              LDR      r1,[r0,#0x20]         ;582
00011e  1300              ASRS     r0,r0,#12             ;582
000120  4201              TST      r1,r0                 ;582
000122  d003              BEQ      |L8.300|
000124  2000              MOVS     r0,#0                 ;582
000126  e7eb              B        |L8.256|
                  |L8.296|
000128  491a              LDR      r1,|L8.404|
00012a  e7ee              B        |L8.266|
                  |L8.300|
00012c  0308              LSLS     r0,r1,#12             ;578
00012e  d500              BPL      |L8.306|
000130  4e0d              LDR      r6,|L8.360|
                  |L8.306|
000132  0388              LSLS     r0,r1,#14             ;578
000134  d501              BPL      |L8.314|
000136  4630              MOV      r0,r6                 ;578
000138  e7e2              B        |L8.256|
                  |L8.314|
00013a  0408              LSLS     r0,r1,#16
00013c  0f80              LSRS     r0,r0,#30
00013e  466a              MOV      r2,sp
000140  5c10              LDRB     r0,[r2,r0]
000142  05ca              LSLS     r2,r1,#23
000144  0489              LSLS     r1,r1,#18
000146  0ec9              LSRS     r1,r1,#27
000148  1c89              ADDS     r1,r1,#2
00014a  0dd2              LSRS     r2,r2,#23
00014c  4341              MULS     r1,r0,r1
00014e  08b0              LSRS     r0,r6,#2
000150  1c92              ADDS     r2,r2,#2
000152  4350              MULS     r0,r2,r0
000154  f7fffffe          BL       __aeabi_uidivmod
000158  0080              LSLS     r0,r0,#2
00015a  e7d1              B        |L8.256|
;;;587    
                          ENDP

                  |L8.348|
                          DCD      0x00010000
                  |L8.352|
                          DCD      0x50000200
                  |L8.356|
                          DCD      0x00b71b00
                  |L8.360|
                          DCD      0x01518000
                  |L8.364|
                          DCD      0xfa0a1eff
                  |L8.368|
                          DCD      0x05f5e0ff
                  |L8.372|
                          DCD      0xfd050f7f
                  |L8.376|
                          DCD      0x02faf07f
                  |L8.380|
                          DCD      0xfe8287c0
                  |L8.384|
                          DCD      0xffe795ff
                  |L8.388|
                          DCD      0x00cc77bf
                  |L8.392|
                          DCD      0x00000201
                  |L8.396|
                          DCD      0x0008d66f
                  |L8.400|
000190  01020204          DCB      1,2,2,4
                  |L8.404|
                          DCD      0x0000c22e

                          AREA ||i.CLK_EnableSysTick||, CODE, READONLY, ALIGN=2

                  CLK_EnableSysTick PROC
;;;637      */
;;;638    void CLK_EnableSysTick(uint32_t u32ClkSrc, uint32_t u32Count) 
000000  b570              PUSH     {r4-r6,lr}
;;;639    {
;;;640        /* Set System Tick counter disabled */
;;;641        SysTick->CTRL = 0;    
000002  4a0b              LDR      r2,|L9.48|
000004  2400              MOVS     r4,#0
000006  6114              STR      r4,[r2,#0x10]
;;;642    
;;;643        /* Set System Tick clock source */
;;;644        if( u32ClkSrc == CLK_CLKSEL0_STCLK_S_HCLK )         
000008  2804              CMP      r0,#4
00000a  d00c              BEQ      |L9.38|
;;;645            SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
;;;646        else
;;;647            CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_STCLK_S_Msk) | u32ClkSrc; 
00000c  4d09              LDR      r5,|L9.52|
00000e  692b              LDR      r3,[r5,#0x10]
000010  2638              MOVS     r6,#0x38
000012  43b3              BICS     r3,r3,r6
000014  4303              ORRS     r3,r3,r0
000016  612b              STR      r3,[r5,#0x10]
                  |L9.24|
;;;648    
;;;649        /* Set System Tick reload value */
;;;650        SysTick->LOAD = u32Count;   
000018  6151              STR      r1,[r2,#0x14]
;;;651        
;;;652        /* Clear System Tick current value and counter flag */
;;;653        SysTick->VAL = 0;           
00001a  6194              STR      r4,[r2,#0x18]
;;;654        
;;;655        /* Set System Tick interrupt enabled and counter enabled */    
;;;656        SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;       
00001c  6910              LDR      r0,[r2,#0x10]
00001e  2103              MOVS     r1,#3
000020  4308              ORRS     r0,r0,r1
000022  6110              STR      r0,[r2,#0x10]
;;;657    }
000024  bd70              POP      {r4-r6,pc}
                  |L9.38|
000026  6910              LDR      r0,[r2,#0x10]         ;645
000028  2304              MOVS     r3,#4                 ;645
00002a  4318              ORRS     r0,r0,r3              ;645
00002c  6110              STR      r0,[r2,#0x10]         ;645
00002e  e7f3              B        |L9.24|
;;;658    
                          ENDP

                  |L9.48|
                          DCD      0xe000e000
                  |L9.52|
                          DCD      0x50000200

                          AREA ||i.CLK_EnableXtalRC||, CODE, READONLY, ALIGN=2

                  CLK_EnableXtalRC PROC
;;;372      */
;;;373    void CLK_EnableXtalRC(uint32_t u32ClkMask)
000000  4902              LDR      r1,|L10.12|
;;;374    {
;;;375        CLK->PWRCON |= u32ClkMask;
000002  680a              LDR      r2,[r1,#0]
000004  4302              ORRS     r2,r2,r0
000006  600a              STR      r2,[r1,#0]
;;;376    }
000008  4770              BX       lr
;;;377    
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
                          DCD      0x50000200

                          AREA ||i.CLK_GetCPUFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetCPUFreq PROC
;;;151      */
;;;152    uint32_t CLK_GetCPUFreq(void)
000000  b510              PUSH     {r4,lr}
;;;153    {
;;;154        SystemCoreClockUpdate();
000002  f7fffffe          BL       SystemCoreClockUpdate
;;;155        return SystemCoreClock;
000006  4801              LDR      r0,|L11.12|
000008  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;156    }
00000a  bd10              POP      {r4,pc}
;;;157    
                          ENDP

                  |L11.12|
                          DCD      SystemCoreClock

                          AREA ||i.CLK_GetHCLKFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetHCLKFreq PROC
;;;127      */
;;;128    uint32_t CLK_GetHCLKFreq(void)
000000  b510              PUSH     {r4,lr}
;;;129    {
;;;130        SystemCoreClockUpdate();
000002  f7fffffe          BL       SystemCoreClockUpdate
;;;131        return SystemCoreClock;
000006  4801              LDR      r0,|L12.12|
000008  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;132    }
00000a  bd10              POP      {r4,pc}
;;;133    
                          ENDP

                  |L12.12|
                          DCD      SystemCoreClock

                          AREA ||i.CLK_GetHXTFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetHXTFreq PROC
;;;112      */
;;;113    uint32_t CLK_GetHXTFreq(void)
000000  4802              LDR      r0,|L13.12|
;;;114    {
;;;115        if(CLK->PWRCON & CLK_PWRCON_XTL12M_EN_Msk)
000002  6800              LDR      r0,[r0,#0]
000004  07c0              LSLS     r0,r0,#31
000006  d000              BEQ      |L13.10|
;;;116            return __HXT;
000008  4801              LDR      r0,|L13.16|
                  |L13.10|
;;;117        else
;;;118            return 0;
;;;119    }
00000a  4770              BX       lr
;;;120    
                          ENDP

                  |L13.12|
                          DCD      0x50000200
                  |L13.16|
                          DCD      0x00b71b00

                          AREA ||i.CLK_GetPCLKFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetPCLKFreq PROC
;;;139      */
;;;140    uint32_t CLK_GetPCLKFreq(void)
000000  b510              PUSH     {r4,lr}
;;;141    {
;;;142        SystemCoreClockUpdate();
000002  f7fffffe          BL       SystemCoreClockUpdate
;;;143        return SystemCoreClock;
000006  4801              LDR      r0,|L14.12|
000008  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;144    }
00000a  bd10              POP      {r4,pc}
;;;145    
                          ENDP

                  |L14.12|
                          DCD      SystemCoreClock

                          AREA ||i.CLK_Idle||, CODE, READONLY, ALIGN=2

                  CLK_Idle PROC
;;;94       */
;;;95     void CLK_Idle(void)
000000  4805              LDR      r0,|L15.24|
;;;96     {
;;;97         /* Set the processor uses sleep as its low power mode */
;;;98         SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
000002  6901              LDR      r1,[r0,#0x10]
000004  2204              MOVS     r2,#4
000006  4391              BICS     r1,r1,r2
000008  6101              STR      r1,[r0,#0x10]
;;;99     
;;;100        /* Set chip in idle mode because of WFI command */
;;;101        CLK->PWRCON &= ~CLK_PWRCON_PWR_DOWN_EN_Msk;
00000a  4804              LDR      r0,|L15.28|
00000c  6801              LDR      r1,[r0,#0]
00000e  2280              MOVS     r2,#0x80
000010  4391              BICS     r1,r1,r2
000012  6001              STR      r1,[r0,#0]
;;;102    
;;;103        /* Chip enter idle mode after CPU run WFI instruction */
;;;104        __WFI();
000014  bf30              WFI      
;;;105    }
000016  4770              BX       lr
;;;106    
                          ENDP

                  |L15.24|
                          DCD      0xe000ed00
                  |L15.28|
                          DCD      0x50000200

                          AREA ||i.CLK_PowerDown||, CODE, READONLY, ALIGN=2

                  CLK_PowerDown PROC
;;;75       */
;;;76     void CLK_PowerDown(void)
000000  4806              LDR      r0,|L16.28|
;;;77     {
;;;78         /* Set the processor uses deep sleep as its low power mode */
;;;79         SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
000002  6901              LDR      r1,[r0,#0x10]
000004  2204              MOVS     r2,#4
000006  4311              ORRS     r1,r1,r2
000008  6101              STR      r1,[r0,#0x10]
;;;80     
;;;81         /* Set system Power-down enabled and Power-down entry condition */
;;;82         CLK->PWRCON |= (CLK_PWRCON_PWR_DOWN_EN_Msk | CLK_PWRCON_PD_WAIT_CPU_Msk);
00000a  4805              LDR      r0,|L16.32|
00000c  6801              LDR      r1,[r0,#0]
00000e  22ff              MOVS     r2,#0xff
000010  3281              ADDS     r2,r2,#0x81
000012  4311              ORRS     r1,r1,r2
000014  6001              STR      r1,[r0,#0]
;;;83     
;;;84         /* Chip enter Power-down mode after CPU run WFI instruction */
;;;85         __WFI();
000016  bf30              WFI      
;;;86     }
000018  4770              BX       lr
;;;87     
                          ENDP

00001a  0000              DCW      0x0000
                  |L16.28|
                          DCD      0xe000ed00
                  |L16.32|
                          DCD      0x50000200

                          AREA ||i.CLK_SetCoreClock||, CODE, READONLY, ALIGN=2

                  CLK_SetCoreClock PROC
;;;166      */
;;;167    uint32_t CLK_SetCoreClock(uint32_t u32Hclk)
000000  b5f8              PUSH     {r3-r7,lr}
;;;168    {
;;;169        uint32_t u32HIRCSTB;
;;;170    
;;;171        /* Read HIRC clock source stable flag */
;;;172        u32HIRCSTB = CLK->CLKSTATUS & CLK_CLKSTATUS_OSC22M_STB_Msk;
000002  4d1c              LDR      r5,|L17.116|
000004  4604              MOV      r4,r0                 ;168
000006  68ee              LDR      r6,[r5,#0xc]
000008  2010              MOVS     r0,#0x10
00000a  4006              ANDS     r6,r6,r0
;;;173    
;;;174        /* The range of u32Hclk is 25 MHz ~ 50 MHz */
;;;175        if(u32Hclk > FREQ_50MHZ)
00000c  481a              LDR      r0,|L17.120|
00000e  4284              CMP      r4,r0
000010  d802              BHI      |L17.24|
;;;176            u32Hclk = FREQ_50MHZ;
;;;177        if(u32Hclk < FREQ_25MHZ)
000012  1040              ASRS     r0,r0,#1
000014  4284              CMP      r4,r0
000016  d200              BCS      |L17.26|
                  |L17.24|
000018  4604              MOV      r4,r0                 ;176
                  |L17.26|
;;;178            u32Hclk = FREQ_25MHZ;
;;;179    
;;;180        /* Switch HCLK clock source to HIRC clock for safe */
;;;181        CLK->PWRCON |= CLK_PWRCON_OSC22M_EN_Msk;
00001a  6828              LDR      r0,[r5,#0]
00001c  2704              MOVS     r7,#4
00001e  4338              ORRS     r0,r0,r7
000020  6028              STR      r0,[r5,#0]
;;;182        CLK_WaitClockReady(CLK_CLKSTATUS_OSC22M_STB_Msk);
000022  2010              MOVS     r0,#0x10
000024  f7fffffe          BL       CLK_WaitClockReady
;;;183        CLK->CLKSEL0 |= CLK_CLKSEL0_HCLK_S_Msk;
000028  6928              LDR      r0,[r5,#0x10]
00002a  2107              MOVS     r1,#7
00002c  4308              ORRS     r0,r0,r1
00002e  6128              STR      r0,[r5,#0x10]
;;;184        CLK->CLKDIV &= (~CLK_CLKDIV_HCLK_N_Msk);
000030  69a8              LDR      r0,[r5,#0x18]
000032  0900              LSRS     r0,r0,#4
000034  0100              LSLS     r0,r0,#4
000036  61a8              STR      r0,[r5,#0x18]
;;;185    
;;;186        /* Configure PLL setting if HXT clock is stable */
;;;187        if(CLK->CLKSTATUS & CLK_CLKSTATUS_XTL12M_STB_Msk)
000038  68e8              LDR      r0,[r5,#0xc]
00003a  07c0              LSLS     r0,r0,#31
00003c  d005              BEQ      |L17.74|
;;;188            u32Hclk = CLK_EnablePLL(CLK_PLLCON_PLL_SRC_HXT, (u32Hclk << 1));
00003e  0061              LSLS     r1,r4,#1
000040  2000              MOVS     r0,#0
000042  f7fffffe          BL       CLK_EnablePLL
000046  4604              MOV      r4,r0
000048  e008              B        |L17.92|
                  |L17.74|
;;;189    
;;;190        /* Configure PLL setting if HXT clock is not stable */
;;;191        else
;;;192        {
;;;193            u32Hclk = CLK_EnablePLL(CLK_PLLCON_PLL_SRC_HIRC, (u32Hclk << 1));
00004a  2001              MOVS     r0,#1
00004c  0061              LSLS     r1,r4,#1
00004e  04c0              LSLS     r0,r0,#19
000050  f7fffffe          BL       CLK_EnablePLL
;;;194    
;;;195            /* Read HIRC clock source stable flag */
;;;196            u32HIRCSTB = CLK->CLKSTATUS & CLK_CLKSTATUS_OSC22M_STB_Msk;
000054  68ee              LDR      r6,[r5,#0xc]
000056  4604              MOV      r4,r0                 ;193
000058  2010              MOVS     r0,#0x10
00005a  4006              ANDS     r6,r6,r0
                  |L17.92|
;;;197        }
;;;198    
;;;199        /* Select HCLK clock source to PLL,
;;;200           Select HCLK clock source divider as 2
;;;201           and update system core clock
;;;202        */
;;;203        CLK_SetHCLK(CLK_CLKSEL0_HCLK_S_PLL, CLK_CLKDIV_HCLK(2));
00005c  2101              MOVS     r1,#1
00005e  2002              MOVS     r0,#2
000060  f7fffffe          BL       CLK_SetHCLK
;;;204    
;;;205        /* Disable HIRC if HIRC is disabled before setting core clock */
;;;206        if(u32HIRCSTB == 0)
000064  2e00              CMP      r6,#0
000066  d102              BNE      |L17.110|
;;;207            CLK->PWRCON &= ~CLK_PWRCON_OSC22M_EN_Msk;
000068  6828              LDR      r0,[r5,#0]
00006a  43b8              BICS     r0,r0,r7
00006c  6028              STR      r0,[r5,#0]
                  |L17.110|
;;;208    
;;;209        /* Return actually HCLK frequency is PLL frequency divide 2 */
;;;210        return u32Hclk >> 1;
00006e  0860              LSRS     r0,r4,#1
;;;211    }
000070  bdf8              POP      {r3-r7,pc}
;;;212    
                          ENDP

000072  0000              DCW      0x0000
                  |L17.116|
                          DCD      0x50000200
                  |L17.120|
                          DCD      0x02faf080

                          AREA ||i.CLK_SetHCLK||, CODE, READONLY, ALIGN=2

                  CLK_SetHCLK PROC
;;;225      */
;;;226    void CLK_SetHCLK(uint32_t u32ClkSrc, uint32_t u32ClkDiv)
000000  b570              PUSH     {r4-r6,lr}
;;;227    {
;;;228        uint32_t u32HIRCSTB;
;;;229    
;;;230        /* Read HIRC clock source stable flag */
;;;231        u32HIRCSTB = CLK->CLKSTATUS & CLK_CLKSTATUS_OSC22M_STB_Msk;
000002  4c10              LDR      r4,|L18.68|
000004  68e5              LDR      r5,[r4,#0xc]
000006  2210              MOVS     r2,#0x10
000008  4015              ANDS     r5,r5,r2
;;;232    
;;;233        /* Switch to HIRC for Safe. Avoid HCLK too high when applying new divider. */
;;;234        CLK->PWRCON |= CLK_PWRCON_OSC22M_EN_Msk;
00000a  6822              LDR      r2,[r4,#0]
00000c  2604              MOVS     r6,#4
00000e  4332              ORRS     r2,r2,r6
000010  6022              STR      r2,[r4,#0]
                  |L18.18|
;;;235        while((CLK->CLKSTATUS & CLK_CLKSTATUS_OSC22M_STB_Msk) == 0);
000012  68e2              LDR      r2,[r4,#0xc]
000014  06d2              LSLS     r2,r2,#27
000016  d5fc              BPL      |L18.18|
;;;236        CLK->CLKSEL0 = (CLK->CLKSEL0 & (~CLK_CLKSEL0_HCLK_S_Msk)) | CLK_CLKSEL0_HCLK_S_HIRC;
000018  6922              LDR      r2,[r4,#0x10]
00001a  2307              MOVS     r3,#7
00001c  431a              ORRS     r2,r2,r3
00001e  6122              STR      r2,[r4,#0x10]
;;;237    
;;;238        /* Apply new Divider */
;;;239        CLK->CLKDIV = (CLK->CLKDIV & (~CLK_CLKDIV_HCLK_N_Msk)) | u32ClkDiv;
000020  69a2              LDR      r2,[r4,#0x18]
000022  0912              LSRS     r2,r2,#4
000024  0112              LSLS     r2,r2,#4
000026  430a              ORRS     r2,r2,r1
000028  61a2              STR      r2,[r4,#0x18]
;;;240    
;;;241        /* Switch to new HCLK source */
;;;242        CLK->CLKSEL0 = (CLK->CLKSEL0 & (~CLK_CLKSEL0_HCLK_S_Msk)) | u32ClkSrc;
00002a  6921              LDR      r1,[r4,#0x10]
00002c  4399              BICS     r1,r1,r3
00002e  4301              ORRS     r1,r1,r0
000030  6121              STR      r1,[r4,#0x10]
;;;243    
;;;244        /* Update System Core Clock */
;;;245        SystemCoreClockUpdate();
000032  f7fffffe          BL       SystemCoreClockUpdate
;;;246    
;;;247        /* Disable HIRC if HIRC is disabled before switching HCLK source */
;;;248        if(u32HIRCSTB == 0)
000036  2d00              CMP      r5,#0
000038  d102              BNE      |L18.64|
;;;249            CLK->PWRCON &= ~CLK_PWRCON_OSC22M_EN_Msk;
00003a  6820              LDR      r0,[r4,#0]
00003c  43b0              BICS     r0,r0,r6
00003e  6020              STR      r0,[r4,#0]
                  |L18.64|
;;;250    }
000040  bd70              POP      {r4-r6,pc}
;;;251    
                          ENDP

000042  0000              DCW      0x0000
                  |L18.68|
                          DCD      0x50000200

                          AREA ||i.CLK_SetModuleClock||, CODE, READONLY, ALIGN=2

                  CLK_SetModuleClock PROC
;;;322    
;;;323    void CLK_SetModuleClock(uint32_t u32ModuleIdx, uint32_t u32ClkSrc, uint32_t u32ClkDiv)
000000  b57f              PUSH     {r0-r6,lr}
;;;324    {
;;;325        uint32_t u32sel = 0, u32div = 0;
;;;326        uint32_t u32SelTbl[4] = {0x0, 0x4, 0xC, 0x24};
000002  4b15              LDR      r3,|L19.88|
000004  cb78              LDM      r3,{r3-r6}
;;;327    
;;;328    
;;;329        if(MODULE_CLKDIV_Msk(u32ModuleIdx) != MODULE_NoMsk)
000006  9603              STR      r6,[sp,#0xc]
000008  466e              MOV      r6,sp
00000a  c638              STM      r6!,{r3-r5}
00000c  0a84              LSRS     r4,r0,#10
00000e  0623              LSLS     r3,r4,#24
000010  0e1b              LSRS     r3,r3,#24
000012  d00c              BEQ      |L19.46|
;;;330        {
;;;331            /* Get clock divider control register address */
;;;332            u32div = (uint32_t)&CLK->CLKDIV + ((MODULE_CLKDIV(u32ModuleIdx)) * 4);
000014  0303              LSLS     r3,r0,#12
000016  0f9b              LSRS     r3,r3,#30
000018  4d10              LDR      r5,|L19.92|
00001a  009b              LSLS     r3,r3,#2
00001c  195b              ADDS     r3,r3,r5
;;;333            /* Apply new divider */
;;;334            M32(u32div) = (M32(u32div) & (~(MODULE_CLKDIV_Msk(u32ModuleIdx) << MODULE_CLKDIV_Pos(u32ModuleIdx)))) | u32ClkDiv;
00001e  b2e5              UXTB     r5,r4
000020  0584              LSLS     r4,r0,#22
000022  0ee4              LSRS     r4,r4,#27
000024  40a5              LSLS     r5,r5,r4
000026  681c              LDR      r4,[r3,#0]
000028  43ac              BICS     r4,r4,r5
00002a  4314              ORRS     r4,r4,r2
00002c  601c              STR      r4,[r3,#0]
                  |L19.46|
;;;335        }
;;;336    
;;;337        if(MODULE_CLKSEL_Msk(u32ModuleIdx) != MODULE_NoMsk)
00002e  0e42              LSRS     r2,r0,#25
000030  0752              LSLS     r2,r2,#29
000032  d010              BEQ      |L19.86|
;;;338        {
;;;339            /* Get clock select control register address */
;;;340            u32sel = (uint32_t)&CLK->CLKSEL0 + (u32SelTbl[MODULE_CLKSEL(u32ModuleIdx)]);
000034  0082              LSLS     r2,r0,#2
000036  0f92              LSRS     r2,r2,#30
000038  0092              LSLS     r2,r2,#2
00003a  466b              MOV      r3,sp
00003c  589a              LDR      r2,[r3,r2]
00003e  4b07              LDR      r3,|L19.92|
000040  3b08              SUBS     r3,r3,#8
000042  18d2              ADDS     r2,r2,r3
;;;341            /* Set new clock selection setting */
;;;342            M32(u32sel) = (M32(u32sel) & (~(MODULE_CLKSEL_Msk(u32ModuleIdx) << MODULE_CLKSEL_Pos(u32ModuleIdx)))) | u32ClkSrc;
000044  0103              LSLS     r3,r0,#4
000046  0f5b              LSRS     r3,r3,#29
000048  01c0              LSLS     r0,r0,#7
00004a  0ec0              LSRS     r0,r0,#27
00004c  4083              LSLS     r3,r3,r0
00004e  6810              LDR      r0,[r2,#0]
000050  4398              BICS     r0,r0,r3
000052  4308              ORRS     r0,r0,r1
000054  6010              STR      r0,[r2,#0]
                  |L19.86|
;;;343        }
;;;344    
;;;345    }
000056  bd7f              POP      {r0-r6,pc}
;;;346    
                          ENDP

                  |L19.88|
                          DCD      ||.constdata||
                  |L19.92|
                          DCD      0x50000218

                          AREA ||i.CLK_SetSysTickClockSrc||, CODE, READONLY, ALIGN=2

                  CLK_SetSysTickClockSrc PROC
;;;357      */
;;;358    void CLK_SetSysTickClockSrc(uint32_t u32ClkSrc)
000000  4a03              LDR      r2,|L20.16|
;;;359    {
;;;360        CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_STCLK_S_Msk) | u32ClkSrc;
000002  6911              LDR      r1,[r2,#0x10]
000004  2338              MOVS     r3,#0x38
000006  4399              BICS     r1,r1,r3
000008  4301              ORRS     r1,r1,r0
00000a  6111              STR      r1,[r2,#0x10]
;;;361    }
00000c  4770              BX       lr
;;;362    
                          ENDP

00000e  0000              DCW      0x0000
                  |L20.16|
                          DCD      0x50000200

                          AREA ||i.CLK_WaitClockReady||, CODE, READONLY, ALIGN=2

                  CLK_WaitClockReady PROC
;;;611      */
;;;612    uint32_t CLK_WaitClockReady(uint32_t u32ClkMask)
000000  b510              PUSH     {r4,lr}
;;;613    {
000002  4604              MOV      r4,r0
;;;614        int32_t i32TimeOutCnt = 1200000;
000004  4907              LDR      r1,|L21.36|
;;;615    
;;;616        while((CLK->CLKSTATUS & u32ClkMask) != u32ClkMask)
000006  4b08              LDR      r3,|L21.40|
000008  e005              B        |L21.22|
                  |L21.10|
;;;617        {
;;;618            if(i32TimeOutCnt-- <= 0)
00000a  460a              MOV      r2,r1
00000c  1e49              SUBS     r1,r1,#1
00000e  2a00              CMP      r2,#0
000010  dc01              BGT      |L21.22|
;;;619                return 0;
000012  2000              MOVS     r0,#0
;;;620        }
;;;621    
;;;622        return 1;
;;;623    }
000014  bd10              POP      {r4,pc}
                  |L21.22|
000016  68da              LDR      r2,[r3,#0xc]          ;616
000018  4620              MOV      r0,r4                 ;616
00001a  4390              BICS     r0,r0,r2              ;616
00001c  d1f5              BNE      |L21.10|
00001e  2001              MOVS     r0,#1                 ;622
000020  bd10              POP      {r4,pc}
;;;624    
                          ENDP

000022  0000              DCW      0x0000
                  |L21.36|
                          DCD      0x00124f80
                  |L21.40|
                          DCD      0x50000200

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x0000000c
                          DCD      0x00000024
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x0000002c
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x0000002c
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\clk.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_clk_c_9b5832dc____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_clk_c_9b5832dc____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_clk_c_9b5832dc____REVSH|
#line 132
|__asm___5_clk_c_9b5832dc____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
